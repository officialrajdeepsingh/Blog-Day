{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  var getData = props.getData;\n  console.log(getData);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    charset: \"utf-8\"\n  })), __jsx(Container, {\n    className: style.root\n  }));\n}\n\nComment.getInitialProps = function _callee(_ref) {\n  var query, id, getData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          id = query.Comment.split('-').pop();\n          console.log(query, ' form comment');\n          _context.prev = 3;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(client.query({\n            query: POST_COMMENT,\n            variables: {\n              id: id\n            }\n          }));\n\n        case 6:\n          getData = _context.sent;\n          return _context.abrupt(\"return\", {\n            getData: getData\n          });\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](3);\n          console.error(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 10]], Promise);\n};","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Component","Card","Typography","Container","Avatar","POST_COMMENT","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","props","getData","console","log","root","getInitialProps","query","id","split","pop","variables","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,OAAOC,KAAP,MAAkB,0CAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAAQC,MAAR,QAAqB,+BAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AAIA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA,MAC9BC,OAD8B,GACpBD,KADoB,CAC9BC,OAD8B;AAErCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,SACE,4BACE,MAAC,IAAD,QACE;AAAM,IAAA,OAAO,EAAC;AAAd,IADF,CADF,EAIE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAER,KAAK,CAACW;AAA5B,IAJF,CADF;AAYD;;AAGDL,OAAO,CAACM,eAAR,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,KAAR,QAAQA,KAAR;AAEnBC,UAAAA,EAFmB,GAEdD,KAAK,CAACP,OAAN,CAAcS,KAAd,CAAqB,GAArB,EAA2BC,GAA3B,EAFc;AAGzBP,UAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ,EAAmB,eAAnB;AAHyB;AAAA;AAAA,2CAKFV,MAAM,CAACU,KAAP,CAAc;AACjCA,YAAAA,KAAK,EAACf,YAD2B;AAEjCmB,YAAAA,SAAS,EAAC;AAACH,cAAAA,EAAE,EAAFA;AAAD;AAFuB,WAAd,CALE;;AAAA;AAKjBN,UAAAA,OALiB;AAAA,2CAShB;AAAEA,YAAAA,OAAO,EAAPA;AAAF,WATgB;;AAAA;AAAA;AAAA;AAYvBC,UAAAA,OAAO,CAACS,KAAR;;AAZuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B","sourcesContent":["import React, { Component } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n  const {getData}= props\r\n  console.log(getData)\r\n\r\n  return (\r\n    <>       \r\n      <Head> \r\n        <meta charset=\"utf-8\" />\r\n    </Head>\r\n      <Container className={style.root}>\r\n      \r\n      \r\n  </Container>  \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\n\r\nComment.getInitialProps =  async ({query})=> {\r\n          \r\n  const id = query.Comment.split( '-' ).pop() ;       \r\n  console.log(query, ' form comment')\r\n  try{\r\n    const getData= await client.query(({\r\n      query:POST_COMMENT,\r\n      variables:{id}\r\n    }))\r\n    return { getData}\r\n  }\r\n  catch(error){\r\n    console.error(error)\r\n  }\r\n\r\n} \r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}