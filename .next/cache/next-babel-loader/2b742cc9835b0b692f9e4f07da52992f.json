{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  const {\n    getData\n  } = props;\n  const {\n    data\n  } = getData;\n  const {\n    post\n  } = data;\n  let UserId;\n  let DisplayName;\n\n  if (false) {\n    UserId = localStorage.getItem(\"userId\");\n    DisplayName = localStorage.getItem(\"displayName\");\n  }\n\n  console.log(UserId, 'UserId');\n  console.log(DisplayName, 'DisplayName');\n  console.log(UserId === null && DisplayName === null, 'UserId === null && DisplayName=== null');\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    charSet: \"utf-8\"\n  })), __jsx(Container, {\n    className: style.root\n  }, __jsx(\"div\", {\n    className: style.cardInner\n  }, __jsx(Typography, {\n    component: \"h3\",\n    variant: \"h3\",\n    className: style.heading\n  }, \"Write a Comment\"), __jsx(Card, {\n    className: style.cardBox\n  }, __jsx(Avatar, {\n    alt: post.featuredImage.altText,\n    src: post.featuredImage.sourceUrl,\n    className: style.imageSize\n  }), __jsx(Link, {\n    href: `/[read]?id=${post.id}`,\n    as: `${post.slug}-${post.id}`\n  }, __jsx(\"a\", {\n    dangerouslySetInnerHTML: {\n      __html: post.title\n    },\n    target: \"_blank\",\n    className: style.cardBoxTitle\n  })))), __jsx(\"div\", {\n    className: style.editorStyle\n  }, UserId === null && DisplayName === null ? __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, null, __jsx(\"a\", null, \" Login \"))) : __jsx(CommentEditor, {\n    keyId: post.id,\n    postid: post.postId\n  })), post.comments && post.comments.nodes.map(ReadComments => {\n    return __jsx(\"div\", {\n      key: ReadComments.id\n    }, __jsx(CommentsCard, {\n      data: ReadComments\n    }), ReadComments.replies && ReadComments.replies.nodes.map(replies => {\n      return __jsx(CommentsCard, {\n        reply: true,\n        data: replies\n      });\n    }));\n  })));\n}\n\nComment.getInitialProps = async ({\n  pathname,\n  query,\n  asPath,\n  req,\n  res,\n  err\n}) => {\n  const id = query.Comment.split('-').pop();\n\n  try {\n    const getData = await client.query({\n      query: POST_COMMENT,\n      variables: {\n        id\n      }\n    });\n    return {\n      getData\n    };\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Component","Card","Typography","Container","Avatar","POST_COMMENT","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","props","getData","data","post","UserId","DisplayName","localStorage","getItem","console","log","root","cardInner","heading","cardBox","featuredImage","altText","sourceUrl","imageSize","id","slug","__html","title","cardBoxTitle","editorStyle","commentLogin","postId","comments","nodes","map","ReadComments","replies","getInitialProps","pathname","query","asPath","req","res","err","split","pop","variables","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n  const { getData }= props;   \r\n  const {data} = getData\r\n const {post} = data\r\n let UserId;\r\n let DisplayName;\r\n\r\n if (process.browser) {\r\n   UserId= localStorage.getItem(\"userId\")\r\n   DisplayName= localStorage.getItem(\"displayName\");\r\n}\r\n\r\nconsole.log(UserId, 'UserId')\r\nconsole.log(DisplayName, 'DisplayName')\r\nconsole.log(UserId === null && DisplayName=== null, 'UserId === null && DisplayName=== null')\r\n\r\n  return (\r\n    <>       \r\n      <Head> \r\n        <meta charSet=\"utf-8\" />\r\n      </Head>\r\n      <Container className={style.root}>\r\n      \r\n        <div className={style.cardInner}>\r\n            <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                Write a Comment\r\n            </Typography>\r\n            <Card className={style.cardBox}>\r\n            <Avatar alt={post.featuredImage.altText} src={post.featuredImage.sourceUrl} className={style.imageSize} />\r\n            <Link href={`/[read]?id=${post.id}`} as={ `${post.slug}-${post.id}`}>\r\n                <a dangerouslySetInnerHTML={{ __html: post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                </a>\r\n            </Link>\r\n            </Card>\r\n        </div>\r\n      \r\n        <div className={style.editorStyle}> \r\n\r\n          {\r\n            \r\n            (UserId === null && DisplayName=== null)?\r\n              <div className={style.commentLogin}>\r\n                <Link>\r\n                  <a> Login </a>\r\n                </Link>\r\n            </div> :\r\n              <CommentEditor keyId={post.id}   postid={post.postId}/>\r\n            \r\n          }\r\n\r\n        \r\n\r\n         \r\n        </div> \r\n     \r\n      { \r\n        post.comments && post.comments.nodes.map(\r\n          (ReadComments)=>{\r\n              return (\r\n                <div key={ReadComments.id}>\r\n                  <CommentsCard  data={ReadComments} />\r\n                  { \r\n                    ReadComments.replies && ReadComments.replies.nodes.map(\r\n                        replies=>{\r\n                            return <CommentsCard   reply={true} data={replies} />\r\n                        }\r\n                      )\r\n                  } \r\n\r\n                </div>\r\n              )       \r\n          }\r\n       )\r\n      }\r\n  </Container>  \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\n\r\nComment.getInitialProps =  async ({ pathname, query, asPath, req, res, err })=> {\r\n          \r\n  const id = query.Comment.split( '-' ).pop() ;       \r\n  try{\r\n    const getData= await client.query(({\r\n      query:POST_COMMENT,\r\n      variables:{id}\r\n    }))\r\n    return { getData}\r\n  }\r\n  catch(error){\r\n    console.error(error)\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}