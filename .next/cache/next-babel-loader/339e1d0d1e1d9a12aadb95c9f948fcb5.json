{"ast":null,"code":"import gql from 'graphql-tag';\nexport const POST_QUERY = gql`query postData {\n  __typename\n  posts {\n  edges{\n    node {\n      id\n      title\n      slug\n      excerpt\n      categories {\n        nodes {\n          name\n          id\n        }\n      }\n      featuredImage {\n          altText\n          title\n          sourceUrl        \n      }\n    }\n    }\n  }\n}`;\nexport const POST_READ = gql`query GET_POST($id: ID!) {\n    post(id: $id) {\n       id\n       commentCount\n       title\n       content\n       slug\n       date\n       commentStatus\n       featuredImage {\n         altText\n         sourceUrl\n         title\n       }\n       categories {\n         edges {\n           node {\n             name\n           }\n         }\n       }\n       author {\n         name\n         avatar {\n           url\n         }\n       }\n       categories {\n        nodes {\n          posts {\n            nodes {\n              title\n              id\n              slug\n              featuredImage{\n                sourceUrl\n                altText\n              }\n            }\n          }\n        }\n      }\n     }\n   }`;\nexport const POST_HEADER = gql`query Menu {\n  __typename\n menu(id:\"TWVudToz\") {\n    id\n    name\n    slug\n     menuItems {\n        nodes {\n          label\n          menuItemId\n          id\n          url\n          connectedObject {\n            __typename\n            ... on Page {\n              id\n              title\n              slug\n            }\n            ... on Post {\n              id\n              title\n            }\n          }\n        }\n      }\n  }\n}`;\nconst POST_FOOTER = `{\n menu(id:\"TWVudToyMw==\") {\n    id\n    name\n    slug\n     menuItems {\n        nodes {\n          label\n          menuItemId\n          id\n          url\n          connectedObject {\n            __typename\n            ... on Page {\n              id\n              title\n              slug\n            }\n            ... on Post {\n              id\n              title\n            }\n          }\n        }\n      }\n  }\n}`;\nexport default POST_FOOTER;\nexport const POST_COMMENT = gql`query GET_POST($id: ID!) {\n  post(id: $id) {\n    id\n    title\n    slug\n    date\n    postId\n    featuredImage {\n      altText\n      sourceUrl\n    }\n    author {\n      userId\n      name\n    }\n    comments {\n      nodes {\n        ...CommentFields\n        replies: children {\n          nodes {\n            ...CommentFields\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  id\n  approved\n  content\n  author {\n    ... on CommentAuthor {\n      name\n    }\n  }\n}`;\nexport const POST_SEARCH = `query Search($search:String!) {\n  posts(where: {search: $search}) {\n  nodes {\n      id\n      slug\n      title\n      featuredImage {\n      sourceUrl\n      altText\n      }\n      author {\n          name\n      }\n  }\n  }\n}`;\nexport const SIGNUP_MUTATION = `mutation MyMutation($userData: RegisterUserInput!) {\n  registerUser(input: $userData) {\n    clientMutationId\n    user {\n      email\n      id\n      jwtAuthToken\n      userId\n      username\n    }\n  }\n}`;","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/graphalQurey.js"],"names":["gql","POST_QUERY","POST_READ","POST_HEADER","POST_FOOTER","POST_COMMENT","POST_SEARCH","SIGNUP_MUTATION"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAQ,MAAMC,UAAU,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;EAAvB;AAyBR,OAAO,MAAME,SAAS,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAtB;AA6CP,OAAO,MAAMG,WAAW,GAAEH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAvB;AA6BP,MAAMI,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;EAApB;AA4BA,eAAeA,WAAf;AAGA,OAAO,MAAMC,YAAY,GAAGL,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAzB;AA0CP,OAAO,MAAMM,WAAW,GAAI;;;;;;;;;;;;;;;EAArB;AAmBP,OAAO,MAAMC,eAAe,GAAG;;;;;;;;;;;EAAxB","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nexport  const POST_QUERY = gql`query postData {\r\n  __typename\r\n  posts {\r\n  edges{\r\n    node {\r\n      id\r\n      title\r\n      slug\r\n      excerpt\r\n      categories {\r\n        nodes {\r\n          name\r\n          id\r\n        }\r\n      }\r\n      featuredImage {\r\n          altText\r\n          title\r\n          sourceUrl        \r\n      }\r\n    }\r\n    }\r\n  }\r\n}` \r\n\r\nexport const POST_READ = gql`query GET_POST($id: ID!) {\r\n    post(id: $id) {\r\n       id\r\n       commentCount\r\n       title\r\n       content\r\n       slug\r\n       date\r\n       commentStatus\r\n       featuredImage {\r\n         altText\r\n         sourceUrl\r\n         title\r\n       }\r\n       categories {\r\n         edges {\r\n           node {\r\n             name\r\n           }\r\n         }\r\n       }\r\n       author {\r\n         name\r\n         avatar {\r\n           url\r\n         }\r\n       }\r\n       categories {\r\n        nodes {\r\n          posts {\r\n            nodes {\r\n              title\r\n              id\r\n              slug\r\n              featuredImage{\r\n                sourceUrl\r\n                altText\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n     }\r\n   }`\r\n\r\nexport const POST_HEADER= gql`query Menu {\r\n  __typename\r\n menu(id:\"TWVudToz\") {\r\n    id\r\n    name\r\n    slug\r\n     menuItems {\r\n        nodes {\r\n          label\r\n          menuItemId\r\n          id\r\n          url\r\n          connectedObject {\r\n            __typename\r\n            ... on Page {\r\n              id\r\n              title\r\n              slug\r\n            }\r\n            ... on Post {\r\n              id\r\n              title\r\n            }\r\n          }\r\n        }\r\n      }\r\n  }\r\n}`\r\n\r\nconst POST_FOOTER= `{\r\n menu(id:\"TWVudToyMw==\") {\r\n    id\r\n    name\r\n    slug\r\n     menuItems {\r\n        nodes {\r\n          label\r\n          menuItemId\r\n          id\r\n          url\r\n          connectedObject {\r\n            __typename\r\n            ... on Page {\r\n              id\r\n              title\r\n              slug\r\n            }\r\n            ... on Post {\r\n              id\r\n              title\r\n            }\r\n          }\r\n        }\r\n      }\r\n  }\r\n}`\r\n\r\nexport default POST_FOOTER\r\n\r\n\r\nexport const POST_COMMENT = gql`query GET_POST($id: ID!) {\r\n  post(id: $id) {\r\n    id\r\n    title\r\n    slug\r\n    date\r\n    postId\r\n    featuredImage {\r\n      altText\r\n      sourceUrl\r\n    }\r\n    author {\r\n      userId\r\n      name\r\n    }\r\n    comments {\r\n      nodes {\r\n        ...CommentFields\r\n        replies: children {\r\n          nodes {\r\n            ...CommentFields\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfragment CommentFields on Comment {\r\n  id\r\n  approved\r\n  content\r\n  author {\r\n    ... on CommentAuthor {\r\n      name\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n\r\n\r\nexport const POST_SEARCH = `query Search($search:String!) {\r\n  posts(where: {search: $search}) {\r\n  nodes {\r\n      id\r\n      slug\r\n      title\r\n      featuredImage {\r\n      sourceUrl\r\n      altText\r\n      }\r\n      author {\r\n          name\r\n      }\r\n  }\r\n  }\r\n}`\r\n\r\n\r\n\r\nexport const SIGNUP_MUTATION =`mutation MyMutation($userData: RegisterUserInput!) {\r\n  registerUser(input: $userData) {\r\n    clientMutationId\r\n    user {\r\n      email\r\n      id\r\n      jwtAuthToken\r\n      userId\r\n      username\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}