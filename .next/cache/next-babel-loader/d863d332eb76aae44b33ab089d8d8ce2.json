{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { client } from \"../apollo-client\";\nimport style from '../css/Searchbar.module.scss';\nexport default class Searchbar extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"sumbitHandler\", e => {\n      e.preventDefault();\n    });\n\n    _defineProperty(this, \"changeHandler\", e => {\n      this.getDataQuery(this.state.search);\n      this.setState({\n        search: e.target.value\n      });\n    });\n\n    this.state = {\n      search: '',\n      data: {}\n    };\n  }\n\n  async getDataQuery(search) {\n    const searchFind = search;\n    const POST_QUERY = gql`query Search($searchFind:String!) {\n            posts(where: {search: $searchFind}) {\n            nodes {\n                id\n                slug\n                title\n                featuredImage {\n                sourceUrl\n                altText\n                }\n                author {\n                    name\n                }\n            }\n            }\n        }`;\n    const res = await client.query({\n      query: POST_QUERY,\n      variables: {\n        searchFind\n      }\n    });\n    console.log(res, ' res');\n    this.setState({\n      data: res\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: style.bar\n    }, __jsx(Container, {\n      className: style.box,\n      maxWidth: \"sm\"\n    }, __jsx(\"form\", {\n      className: style.formRoot,\n      onSubmit: this.sumbitHandler,\n      noValidate: true,\n      autoComplete: \"off\"\n    }, __jsx(TextField, {\n      onChange: this.changeHandler,\n      id: \"standard-secondary\",\n      className: style.rootText,\n      label: \"Search Here\"\n    })), this.state.data.data ? this.state.data.data.posts.nodes.map(postData => {\n      return __jsx(List, {\n        key: postData.id,\n        className: style.rootList\n      }, __jsx(Link, {\n        href: `/[read]?id=${postData.id}`,\n        as: `${postData.slug}-${postData.id}`\n      }, __jsx(ListItem, {\n        button: true,\n        alignItems: \"flex-start\"\n      }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n        alt: postData.featuredImage.altText,\n        src: postData.featuredImage.sourceUrl\n      })), __jsx(ListItemText, {\n        primary: postData.title,\n        secondary: __jsx(Typography, {\n          component: \"span\",\n          variant: \"body2\",\n          className: style.inline,\n          color: \"textPrimary\"\n        }, postData.author.name)\n      }))));\n    }) : ''));\n  }\n\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/Header/Searchbar.js"],"names":["React","Component","useState","Container","TextField","List","ListItem","Divider","ListItemText","ListItemAvatar","Avatar","Typography","Link","useQuery","gql","client","style","Searchbar","constructor","props","e","preventDefault","getDataQuery","state","search","setState","target","value","data","searchFind","POST_QUERY","res","query","variables","console","log","render","bar","box","formRoot","sumbitHandler","changeHandler","rootText","posts","nodes","map","postData","id","rootList","slug","featuredImage","altText","sourceUrl","title","inline","author","name"],"mappings":"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","sourcesContent":["import React, { Component,useState  } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from 'next/link'\r\n\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../apollo-client\";\r\n\r\n\r\nimport style from '../css/Searchbar.module.scss';\r\n\r\n\r\n\r\n\r\nexport default class Searchbar extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state={\r\n            search:'',\r\n            data:{}\r\n        }\r\n       \r\n    }\r\n\r\n     async getDataQuery(search){\r\n        const searchFind= search \r\n        const POST_QUERY = gql`query Search($searchFind:String!) {\r\n            posts(where: {search: $searchFind}) {\r\n            nodes {\r\n                id\r\n                slug\r\n                title\r\n                featuredImage {\r\n                sourceUrl\r\n                altText\r\n                }\r\n                author {\r\n                    name\r\n                }\r\n            }\r\n            }\r\n        }`\r\n      \r\n        const res= await client.query(({\r\n            query:POST_QUERY,\r\n            variables:{searchFind}\r\n        }))\r\n\r\n        console.log(res, ' res')\r\n        this.setState({\r\n            data:res\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n \r\n\r\n\r\n    sumbitHandler = (e)=>{\r\n        e.preventDefault();\r\n     }\r\n    \r\n      changeHandler = (e)=>{\r\n        this.getDataQuery(this.state.search)\r\n         this.setState({\r\n             search :e.target.value\r\n         })\r\n     }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n             <div className={style.bar}> \r\n                <Container className={style.box} maxWidth=\"sm\" >\r\n                    <form className={style.formRoot} onSubmit={this.sumbitHandler}  noValidate autoComplete=\"off\">\r\n                        <TextField onChange={this.changeHandler} id=\"standard-secondary\"  className={style.rootText} label=\"Search Here\" />\r\n                    </form>  \r\n                   \r\n                   {\r\n                    this.state.data.data?  (\r\n                        this.state.data.data.posts.nodes.map(\r\n                            postData=>{\r\n                                return(\r\n                                    <List key={postData.id} className={style.rootList}>\r\n                                        <Link href={`/[read]?id=${postData.id}`} as={ `${postData.slug}-${postData.id}`} >\r\n                                            <ListItem button={true}  alignItems=\"flex-start\">\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar alt={postData.featuredImage.altText} src={postData.featuredImage.sourceUrl} />\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText\r\n                                                    primary={postData.title}\r\n                                                    secondary={ \r\n                                                    <Typography\r\n                                                            component=\"span\"\r\n                                                            variant=\"body2\"\r\n                                                            className={style.inline}\r\n                                                            color=\"textPrimary\"\r\n                                                        >\r\n                                                            {postData.author.name}\r\n                                                        </Typography>                                                                   \r\n                                                    }  \r\n                                                />\r\n                                            </ListItem>\r\n                                        </Link> \r\n                                    </List>\r\n                                )\r\n                            }\r\n                        )\r\n\r\n                    ) : ''\r\n                   \r\n                   \r\n                   }\r\n                </Container>\r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}