{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  var getData = props.getData;\n  var data = getData.data;\n  var post = data.post;\n  var UserId;\n  var DisplayName;\n\n  if (true) {\n    UserId = localStorage.getItem(\"userId\");\n    DisplayName = localStorage.getItem(\"displayName\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    charSet: \"utf-8\"\n  })), __jsx(Container, {\n    className: style.root\n  }, __jsx(\"div\", {\n    className: style.cardInner\n  }, __jsx(Typography, {\n    component: \"h3\",\n    variant: \"h3\",\n    className: style.heading\n  }, \"Write a Comment\"), __jsx(Card, {\n    className: style.cardBox\n  }, __jsx(Avatar, {\n    alt: post.featuredImage.altText,\n    src: post.featuredImage.sourceUrl,\n    className: style.imageSize\n  }), __jsx(Link, {\n    href: \"/[read]?id=\".concat(post.id),\n    as: \"\".concat(post.slug, \"-\").concat(post.id)\n  }, __jsx(\"a\", {\n    dangerouslySetInnerHTML: {\n      __html: post.title\n    },\n    target: \"_blank\",\n    className: style.cardBoxTitle\n  })))), !UserId && !DisplayName ? __jsx(LoginCheck, null) : __jsx(CommentEditor, {\n    className: style.editorStyle,\n    keyId: post.id,\n    postid: post.postId\n  }), post.comments && post.comments.nodes.map(function (ReadComments) {\n    return __jsx(\"div\", {\n      key: ReadComments.id\n    }, __jsx(CommentsCard, {\n      key: ReadComments.id,\n      data: ReadComments\n    }), ReadComments.replies && ReadComments.replies.nodes.map(function (replies) {\n      return __jsx(CommentsCard, {\n        key: replies.id,\n        reply: true,\n        data: replies\n      });\n    }));\n  })));\n}\n\nComment.getInitialProps = function _callee(_ref) {\n  var pathname, query, asPath, req, res, err, id, getData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, asPath = _ref.asPath, req = _ref.req, res = _ref.res, err = _ref.err;\n          id = query.Comment.split('-').pop();\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(client.query({\n            query: POST_COMMENT,\n            variables: {\n              id: id\n            }\n          }));\n\n        case 5:\n          getData = _context.sent;\n          return _context.abrupt(\"return\", {\n            getData: getData\n          });\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n};\n\nfunction LoginCheck() {\n  return __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    target: \"_blank\"\n  }, \" Login Now\")));\n}","map":null,"metadata":{},"sourceType":"module"}