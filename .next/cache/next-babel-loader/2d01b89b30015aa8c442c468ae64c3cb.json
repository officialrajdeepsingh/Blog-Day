{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query GET_POST($id: ID!) {\\n           \\n            page(id: $id) {\\n                content\\n                title\\n                featuredImage {\\n                  altText\\n                  sourceUrl(size: LARGE)\\n                  id\\n                }\\n              }\\n            \\n           }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport Head from 'next/head';\nimport { client } from \"../../Component/apollo-client\";\nimport Typography from '@material-ui/core/Typography';\nimport style from \"../../Component/css/Page.module.scss\";\n\nvar page = /*#__PURE__*/function (_Component) {\n  _inherits(page, _Component);\n\n  var _super = _createSuper(page);\n\n  function page() {\n    _classCallCheck(this, page);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(page, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.props.data;\n      return __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"h1\",\n        variant: \"h1\",\n        dangerouslySetInnerHTML: {\n          __html: data.data.page.title\n        }\n      }), __jsx(Typography, {\n        component: \"div\",\n        dangerouslySetInnerHTML: {\n          __html: data.data.page.content\n        }\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, id, POST_QUERY, res;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query;\n              id = query.Page.split('-').pop();\n              console.log(query, ' ctx query FORM QUERY ');\n              POST_QUERY = gql(_templateObject());\n              _context.prev = 4;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(client.query({\n                query: POST_QUERY,\n                variables: {\n                  id: id\n                }\n              }));\n\n            case 7:\n              res = _context.sent;\n              return _context.abrupt(\"return\", {\n                data: res\n              });\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](4);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[4, 11]], Promise);\n    }\n  }]);\n\n  return page;\n}(Component);\n\nexport { page as default };","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/page/[Page].js"],"names":["React","Component","gql","Head","client","Typography","style","page","data","props","__html","title","content","query","id","Page","split","pop","console","log","POST_QUERY","variables","res"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,MAAR,QAAqB,+BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,sCAAlB;;IAIqBC,I;;;;;;;;;;;;;6BAiCR;AAAA,UAEEC,IAFF,GAEU,KAAKC,KAFf,CAEED,IAFF;AAGL,aACI,4BAEM,MAAC,UAAD;AAAY,QAAA,SAAS,EAAC,IAAtB;AAA2B,QAAA,OAAO,EAAC,IAAnC;AAAwC,QAAA,uBAAuB,EAAE;AAAEE,UAAAA,MAAM,EAAEF,IAAI,CAACA,IAAL,CAAUD,IAAV,CAAeI;AAAzB;AAAjE,QAFN,EAIO,MAAC,UAAD;AAAY,QAAA,SAAS,EAAC,KAAtB;AAA6B,QAAA,uBAAuB,EAAE;AAAED,UAAAA,MAAM,EAAEF,IAAI,CAACA,IAAL,CAAUD,IAAV,CAAeK;AAAzB;AAAtD,QAJP,CADJ;AASH;;;;;;;;;AA3C6BC,cAAAA,K,QAAAA,K;AAEpBC,cAAAA,E,GAAOD,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAkB,GAAlB,EAAwBC,GAAxB,E;AAEbC,cAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmB,wBAAnB;AAEMO,cAAAA,U,GAAalB,G;;;+CAeAE,MAAM,CAACS,KAAP,CAAc;AAC3BA,gBAAAA,KAAK,EAACO,UADqB;AAE3BC,gBAAAA,SAAS,EAAC;AAACP,kBAAAA,EAAE,EAAFA;AAAD;AAFiB,eAAd,C;;;AAAXQ,cAAAA,G;+CAIC;AAAEd,gBAAAA,IAAI,EAAEc;AAAR,e;;;;;AAGPJ,cAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;EA9BwBlB,S;;SAAbM,I","sourcesContent":["import React, { Component } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport Head from 'next/head'\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport style from \"../../Component/css/Page.module.scss\";\r\n\r\n\r\n\r\nexport default class page extends Component {\r\n\r\n    static async getInitialProps({query}) {\r\n        \r\n        const id =   query.Page.split( '-' ).pop() ;\r\n\r\n        console.log(query, ' ctx query FORM QUERY ')\r\n                \r\n        const POST_QUERY = gql`query GET_POST($id: ID!) {\r\n           \r\n            page(id: $id) {\r\n                content\r\n                title\r\n                featuredImage {\r\n                  altText\r\n                  sourceUrl(size: LARGE)\r\n                  id\r\n                }\r\n              }\r\n            \r\n           }`\r\n        \r\n       try {\r\n          const res= await client.query(({\r\n              query:POST_QUERY,\r\n              variables:{id}\r\n          }))\r\n          return { data: res}\r\n        }\r\n        catch(error){\r\n          console.log(error)\r\n        }\r\n    }\r\n    render() {\r\n        \r\n        const {data} = this.props;\r\n        return (\r\n            <>\r\n\r\n                  <Typography component=\"h1\" variant=\"h1\" dangerouslySetInnerHTML={{ __html: data.data.page.title }}>\r\n                      </Typography>           \r\n                   <Typography component=\"div\"  dangerouslySetInnerHTML={{ __html: data.data.page.content }}>\r\n                    </Typography> \r\n            </>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}