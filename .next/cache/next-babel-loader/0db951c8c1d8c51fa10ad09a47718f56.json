{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component, StrictMode } from 'react';\nimport Head from 'next/head';\nimport Grid from '@material-ui/core/Grid';\nimport MainSection from '../Component/MainSection/MainSection';\nimport Artical from '../Component/Artical/Artical';\nimport { POST_QUERY } from \"../Component/graphalQurey\";\nimport { client } from \"../Component/apollo-client\";\nimport ErrorBoundaries from \"../Component/ErrorBoundaries\";\nimport { NextSeo } from 'next-seo';\nimport RajdeepSingh from '../Component/asset/RajdeepSingh.jpg';\nimport ErrorComponent from '../Component/ErrorComponent';\nexport default function Index(props) {\n  const {\n    getData,\n    concerter\n  } = props;\n\n  if (concerter) {\n    return __jsx(ErrorComponent, {\n      concerter: concerter\n    });\n  } else {\n    const {\n      data\n    } = getData;\n    const {\n      posts,\n      generalSettings\n    } = data;\n    return __jsx(React.Fragment, null, __jsx(NextSeo, {\n      title: generalSettings.title,\n      description: generalSettings.description,\n      keywords: \"Rajdeep Singh, Javascript, React, html,css,bootstrap\",\n      canonical: \"https://www.rajdeepsingh.dev/\",\n      openGraph: {\n        url: 'https://www.rajdeepsingh.dev/',\n        title: generalSettings.title,\n        description: generalSettings.description,\n        images: [posts.edges.map(post => {\n          return {\n            url: post.node.featuredImage.sourceUrl,\n            alt: post.node.featuredImage.altText\n          };\n        })],\n        site_name: 'Rajdeep Singh'\n      },\n      twitter: {\n        handle: '@handle',\n        site: '@site',\n        cardType: 'summary_large_image'\n      }\n    }), __jsx(Head, null, __jsx(\"link\", {\n      rel: \"icon\",\n      href: RajdeepSingh,\n      type: \"image/x-icon\"\n    })), __jsx(Grid, {\n      component: \"article\",\n      container: true\n    }, posts.edges.map((post, i) => {\n      if (i === 0) {\n        return __jsx(MainSection, {\n          key: post.node.id,\n          post: post\n        });\n      } else {\n        return __jsx(Artical, {\n          key: post.node.id,\n          post: post\n        });\n      }\n    })));\n  }\n}\nexport const getServerSideProps = async ({\n  res\n}) => {\n  try {\n    const getData = await client.query({\n      query: POST_QUERY\n    });\n    return {\n      props: {\n        getData\n      }\n    };\n  } catch (error) {\n    const concerter = JSON.stringify(error);\n    return {\n      props: {\n        concerter\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}