{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport { useRouter } from 'next/router';\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  const {\n    concerter,\n    getData\n  } = props;\n  const {\n    data\n  } = getData;\n  const {\n    post\n  } = data;\n  console.log(post);\n  let UserId;\n  let DisplayName;\n\n  if (false) {\n    UserId = localStorage.getItem(\"userId\");\n    DisplayName = localStorage.getItem(\"displayName\");\n  }\n\n  console.log(props, ' inside Comments ');\n  const router = useRouter();\n\n  if (concerter) {\n    router.push('/');\n    return null;\n  } else {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    })), __jsx(Container, {\n      className: style.root\n    }, __jsx(\"div\", {\n      className: style.cardInner\n    }, __jsx(Typography, {\n      component: \"h3\",\n      variant: \"h3\",\n      className: style.heading\n    }, \"Write a Comment\"), __jsx(Card, {\n      className: style.cardBox\n    }, __jsx(Avatar, {\n      alt: post.featuredImage.altText,\n      src: post.featuredImage.sourceUrl,\n      className: style.imageSize\n    }), __jsx(Link, {\n      href: `/[read]?id=${post.id}`,\n      as: `${post.slug}-${post.id}`\n    }, __jsx(\"a\", {\n      dangerouslySetInnerHTML: {\n        __html: post.title\n      },\n      target: \"_blank\",\n      className: style.cardBoxTitle\n    })))), __jsx(\"div\", {\n      style: {\n        \"display\": \"block\"\n      }\n    }, !UserId && !DisplayName ? __jsx(LoginCheck, null) : __jsx(CommentEditor, {\n      className: style.editorStyle,\n      keyId: post.id,\n      postid: post.postId\n    })), post.comments && post.comments.nodes.map(ReadComments => {\n      return __jsx(\"div\", {\n        style: {\n          \"display\": \"block\"\n        },\n        key: ReadComments.id\n      }, __jsx(CommentsCard, {\n        key: ReadComments.id,\n        data: ReadComments\n      }), ReadComments.replies && ReadComments.replies.nodes.map(replies => {\n        return __jsx(CommentsCard, {\n          key: replies.id,\n          reply: true,\n          data: replies\n        });\n      }));\n    })));\n  }\n}\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const id = query.Comment.split('-').pop();\n\n  try {\n    const getData = await client.query({\n      query: POST_COMMENT,\n      variables: {\n        id\n      }\n    });\n    return {\n      props: {\n        getData\n      }\n    };\n  } catch (error) {\n    const concerter = JSON.stringify(error);\n    return {\n      concerter\n    };\n  }\n};\n\nfunction LoginCheck() {\n  return __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    target: \"_blank\"\n  }, \" Login Now\")));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Fragment","useEffect","useState","Card","Typography","Container","Avatar","POST_COMMENT","useRouter","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","props","concerter","getData","data","post","console","log","UserId","DisplayName","localStorage","getItem","router","push","root","cardInner","heading","cardBox","featuredImage","altText","sourceUrl","imageSize","id","slug","__html","title","cardBoxTitle","editorStyle","postId","comments","nodes","map","ReadComments","replies","getServerSideProps","query","split","pop","variables","error","JSON","stringify","LoginCheck","commentLogin"],"mappings":"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","sourcesContent":["import React, { Fragment,useEffect, useState } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\nimport { useRouter } from 'next/router'\r\n\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n\r\n\r\n  const {concerter, getData} =props\r\n  const { data } =  getData\r\n  const { post } = data\r\n\r\n      console.log(post)\r\n      let UserId;\r\n      let DisplayName;\r\n\r\n    if (process.browser) {\r\n      UserId= localStorage.getItem(\"userId\")\r\n      DisplayName= localStorage.getItem(\"displayName\");\r\n    } \r\n\r\n    console.log(props , ' inside Comments ')\r\n    const router = useRouter()\r\n \r\n\r\n  if (concerter) {\r\n       router.push('/')\r\n       return null\r\n  }\r\n\r\n else{\r\n    return (\r\n      <>       \r\n        <Head> \r\n          <meta charSet=\"utf-8\" />\r\n        </Head>\r\n         <Container className={style.root}>\r\n            <div className={style.cardInner}>\r\n                <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                    Write a Comment\r\n                </Typography>\r\n                <Card className={style.cardBox}>\r\n                <Avatar alt={post.featuredImage.altText} src={post.featuredImage.sourceUrl} className={style.imageSize} />\r\n                <Link href={`/[read]?id=${post.id}`} as={ `${post.slug}-${post.id}`}>\r\n                    <a dangerouslySetInnerHTML={{ __html: post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                    </a>\r\n                </Link>\r\n                </Card>\r\n            </div>\r\n          \r\n          <div style={{\"display\":\"block\"}} > \r\n              {            \r\n                ( !UserId && !DisplayName)? < LoginCheck/> : \r\n                          <CommentEditor className={style.editorStyle} keyId={post.id}   postid={post.postId}/>  \r\n              }\r\n          </div>\r\n        \r\n          { \r\n            post.comments && post.comments.nodes.map(\r\n              (ReadComments)=>{\r\n                  return (\r\n                  <div style={{\"display\":\"block\"}}  key={ReadComments.id} >\r\n                      <CommentsCard key={ReadComments.id}  data={ReadComments} />\r\n                        { \r\n                          ReadComments.replies && ReadComments.replies.nodes.map(\r\n                              replies=>{\r\n                                  return <CommentsCard key={replies.id} reply={true} data={replies} />\r\n                              }\r\n                            )\r\n                        } \r\n                    </div> \r\n                  )       \r\n              }\r\n          )\r\n          }\r\n      </Container>    \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport const  getServerSideProps =  async ({  query })=> {\r\n          \r\n  const id = query.Comment.split( '-' ).pop() ;       \r\n    try{\r\n      const getData= await client.query(({\r\n        query:POST_COMMENT,\r\n        variables:{id}\r\n      }))\r\n      return{ \r\n        props: {getData} }\r\n    }\r\n    catch(error){\r\n      const concerter= JSON.stringify(error)\r\n      return {concerter}\r\n    }\r\n\r\n}\r\n\r\nfunction LoginCheck() {\r\n  return (\r\n    <div className={style.commentLogin}>\r\n    <Link href=\"/login\">\r\n      <a target=\"_blank\"> Login Now</a>\r\n    </Link>\r\n   </div>\r\n      \r\n    \r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}