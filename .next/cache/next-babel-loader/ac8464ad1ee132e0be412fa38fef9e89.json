{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport gql from 'graphql-tag';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss';\nimport { request } from 'graphql-request';\nimport { COMMENT_MUTATION } from \"../graphalQurey\";\nimport useSWR from 'swr';\n\nvar signUP = function signUP(input) {\n  return request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\n}; // const fetcher = query => request('https://api.graph.cool/simple/v1/movies', query)\n\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nexport default function CommentEditor(props) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      fetchdata = _React$useState4[0],\n      setFetchdata = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"write\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedTab = _React$useState6[0],\n      setSelectedTab = _React$useState6[1]; // const [userId, setUserId] = React.useState(\"\");\n  // const [displayName, setDisplayName] = React.useState(\"\");\n  //  const { data } = useSWR(isReady ? '/api/user' : null, fetcher, { suspense: true })\n  // const { data, error } =  useSWR( fetchdata? COMMENT_MUTATION : null ,)\n\n\n  console.log(displayName, 'displayName Comment ');\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      open = _React$useState8[0],\n      setOpen = _React$useState8[1];\n\n  var converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n  React.useEffect(function () {\n    if (id) {\n      console.log(id);\n      projectNameRef.current.value = '';\n    }\n  }, [id]);\n\n  var submitComment = function submitComment(e) {\n    var getUserId, getDisplayName, getData;\n    return _regeneratorRuntime.async(function submitComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            getUserId = localStorage.getItem(\"userId\");\n            getDisplayName = localStorage.getItem(\"displayName\");\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(signUP({\n              \"input\": {\n                \"content\": value,\n                \"author\": getDisplayName,\n                \"userId\": getUserId,\n                \"clientMutationId\": \"createComment\",\n                \"commentOn\": props.postid\n              }\n            }));\n\n          case 5:\n            getData = _context.sent;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  return __jsx(\"div\", {\n    key: props.keyId,\n    className: \"container\"\n  }, __jsx(\"form\", {\n    onSubmit: submitComment\n  }, __jsx(ReactMde, {\n    value: value,\n    onChange: setValue,\n    selectedTab: selectedTab,\n    onTabChange: setSelectedTab,\n    generateMarkdownPreview: function generateMarkdownPreview(markdown) {\n      return Promise.resolve(converter.makeHtml(markdown));\n    },\n    childProps: {\n      writeButton: {\n        tabIndex: -1\n      }\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    className: style.productButton,\n    size: \"small\"\n  }, \"Submit\")), data ? __jsx(Snackbar, {\n    open: open,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"success\"\n  }, data)) : '');\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/CommentEditor/CommentEditor.js"],"names":["React","ReactMde","Showdown","gql","Snackbar","MuiAlert","Button","style","request","COMMENT_MUTATION","useSWR","signUP","input","Alert","props","CommentEditor","useState","value","setValue","fetchdata","setFetchdata","selectedTab","setSelectedTab","console","log","displayName","open","setOpen","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","useEffect","id","projectNameRef","current","submitComment","e","preventDefault","getUserId","localStorage","getItem","getDisplayName","postid","getData","handleClose","keyId","markdown","Promise","resolve","makeHtml","writeButton","tabIndex","productButton","data","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport gql from 'graphql-tag';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss'\nimport { request } from 'graphql-request';\nimport {COMMENT_MUTATION} from \"../graphalQurey\"\nimport useSWR from 'swr'\n\n\nconst signUP = (input) => {\n  return  request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\n};\n\n// const fetcher = query => request('https://api.graph.cool/simple/v1/movies', query)\n\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n export default  function CommentEditor(props) {\n  const [value, setValue] = React.useState();\n    const [fetchdata, setFetchdata  ] = React.useState(false);\n    const [selectedTab, setSelectedTab] = React.useState(\"write\");\n    // const [userId, setUserId] = React.useState(\"\");\n    // const [displayName, setDisplayName] = React.useState(\"\");\n    \n    //  const { data } = useSWR(isReady ? '/api/user' : null, fetcher, { suspense: true })\n\n  // const { data, error } =  useSWR( fetchdata? COMMENT_MUTATION : null ,)\n \n\n\nconsole.log(displayName,'displayName Comment ')\n\n    \n    const [open, setOpen] = React.useState(true);\n\n    const converter = new Showdown.Converter({\n      tables: true,\n      simplifiedAutoLink: true,\n      strikethrough: true,\n      tasklists: true\n    });\n\n    React.useEffect(() => {\n      if (id) {\n        console.log(id);\n        projectNameRef.current.value = ''\n      }\n    }, [id])\n\n    const submitComment= async (e) => {\n        e.preventDefault();          \n            \n          const getUserId= localStorage.getItem(\"userId\")\n          const getDisplayName= localStorage.getItem(\"displayName\");\n         \n         const getData= await signUP( {\n            \"input\":{\n                    \"content\": value,\n                    \"author\": getDisplayName, \n                    \"userId\":getUserId,\n                    \"clientMutationId\": \"createComment\",\n                    \"commentOn\": props.postid\n            }\n          }  \n        ) \n\n          //  console.log(getUserId, \"getUserId\")\n        }\n      \n     const handleClose = () => {      \n         setOpen(false);\n      };\n       \n    return (\n      <div key={props.keyId} className=\"container\">\n        \n        <form onSubmit={submitComment} > \n  \n          <ReactMde\n            value={value}\n            onChange={setValue}\n            selectedTab={selectedTab}\n            onTabChange={setSelectedTab}\n            generateMarkdownPreview={markdown =>\n              Promise.resolve(converter.makeHtml(markdown))\n            }\n            childProps={{\n              writeButton: {\n                tabIndex: -1\n              }\n            }}\n  \n          />\n  \n            <Button type=\"submit\" className={style.productButton} size=\"small\">\n                             Submit  \n            </Button>\n        </form>\n      \n        {\n            (data) ? <Snackbar open={open} anchorOrigin={ \n                {    vertical: 'top', \n                    horizontal: 'center' }\n                } \n                autoHideDuration={6000} onClose={handleClose}>\n                  <Alert onClose={handleClose} severity=\"success\">\n                        {data} \n                  </Alert>\n              </Snackbar> : ''\n        \n        }\n\n       \n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}