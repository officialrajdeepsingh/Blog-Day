{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  const {\n    statusCode,\n    getData\n  } = props;\n  const {\n    data\n  } = getData;\n  const {\n    post\n  } = data;\n  let UserId;\n  let DisplayName;\n\n  if (false) {\n    UserId = localStorage.getItem(\"userId\");\n    DisplayName = localStorage.getItem(\"displayName\");\n  }\n\n  if (statusCode, post) {\n    return __jsx(Error, {\n      statusCode: statusCode\n    });\n  } else {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    })), __jsx(Container, {\n      className: style.root\n    }, __jsx(\"div\", {\n      className: style.cardInner\n    }, __jsx(Typography, {\n      component: \"h3\",\n      variant: \"h3\",\n      className: style.heading\n    }, \"Write a Comment\"), __jsx(Card, {\n      className: style.cardBox\n    }, __jsx(Avatar, {\n      alt: post.featuredImage.altText,\n      src: post.featuredImage.sourceUrl,\n      className: style.imageSize\n    }), __jsx(Link, {\n      href: `/[read]?id=${post.id}`,\n      as: `${post.slug}-${post.id}`\n    }, __jsx(\"a\", {\n      dangerouslySetInnerHTML: {\n        __html: post.title\n      },\n      target: \"_blank\",\n      className: style.cardBoxTitle\n    })))), __jsx(\"div\", {\n      style: {\n        \"display\": \"block\"\n      }\n    }, !UserId && !DisplayName ? __jsx(LoginCheck, null) : __jsx(CommentEditor, {\n      className: style.editorStyle,\n      keyId: post.id,\n      postid: post.postId\n    })), post.comments && post.comments.nodes.map(ReadComments => {\n      return __jsx(\"div\", {\n        style: {\n          \"display\": \"block\"\n        },\n        key: ReadComments.id\n      }, __jsx(CommentsCard, {\n        key: ReadComments.id,\n        data: ReadComments\n      }), ReadComments.replies && ReadComments.replies.nodes.map(replies => {\n        return __jsx(CommentsCard, {\n          key: replies.id,\n          reply: true,\n          data: replies\n        });\n      }));\n    })));\n  }\n}\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const id = query.Comment.split('-').pop();\n\n  try {\n    const getData = await client.query({\n      query: POST_COMMENT,\n      variables: {\n        id\n      }\n    });\n    return {\n      props: {\n        getData\n      }\n    };\n  } catch (error) {\n    return {\n      props: {\n        statusCode: 404\n      }\n    };\n  }\n};\n\nfunction LoginCheck() {\n  return __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    target: \"_blank\"\n  }, \" Login Now\")));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Fragment","useEffect","useState","Card","Typography","Container","Avatar","POST_COMMENT","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","props","statusCode","getData","data","post","UserId","DisplayName","localStorage","getItem","root","cardInner","heading","cardBox","featuredImage","altText","sourceUrl","imageSize","id","slug","__html","title","cardBoxTitle","editorStyle","postId","comments","nodes","map","ReadComments","replies","getServerSideProps","query","split","pop","variables","error","LoginCheck","commentLogin"],"mappings":"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","sourcesContent":["import React, { Fragment,useEffect, useState } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n  const { statusCode, getData}= props;\r\n      const {data} = getData\r\n      const {post} = data\r\n      let UserId;\r\n      let DisplayName;\r\n\r\n    if (process.browser) {\r\n      UserId= localStorage.getItem(\"userId\")\r\n      DisplayName= localStorage.getItem(\"displayName\");\r\n    } \r\n\r\nif (statusCode , post) {\r\n  return <Error statusCode={statusCode} />\r\n}else {\r\n  return (\r\n    <>       \r\n      <Head> \r\n        <meta charSet=\"utf-8\" />\r\n      </Head>\r\n      <Container className={style.root}>\r\n        <div className={style.cardInner}>\r\n            <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                Write a Comment\r\n            </Typography>\r\n            <Card className={style.cardBox}>\r\n            <Avatar alt={post.featuredImage.altText} src={post.featuredImage.sourceUrl} className={style.imageSize} />\r\n            <Link href={`/[read]?id=${post.id}`} as={ `${post.slug}-${post.id}`}>\r\n                <a dangerouslySetInnerHTML={{ __html: post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                </a>\r\n            </Link>\r\n            </Card>\r\n        </div>\r\n       \r\n       <div style={{\"display\":\"block\"}} > \r\n          {            \r\n            ( !UserId && !DisplayName)? < LoginCheck/> : \r\n                      <CommentEditor className={style.editorStyle} keyId={post.id}   postid={post.postId}/>  \r\n          }\r\n       </div>\r\n     \r\n      { \r\n        post.comments && post.comments.nodes.map(\r\n          (ReadComments)=>{\r\n              return (\r\n               <div style={{\"display\":\"block\"}}  key={ReadComments.id} >\r\n                  <CommentsCard key={ReadComments.id}  data={ReadComments} />\r\n                    { \r\n                      ReadComments.replies && ReadComments.replies.nodes.map(\r\n                          replies=>{\r\n                              return <CommentsCard key={replies.id} reply={true} data={replies} />\r\n                          }\r\n                        )\r\n                    } \r\n                </div> \r\n              )       \r\n          }\r\n       )\r\n      }\r\n  </Container>  \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\n}\r\n\r\n\r\nexport const  getServerSideProps =  async ({  query })=> {\r\n          \r\n  const id = query.Comment.split( '-' ).pop() ;       \r\n  try{\r\n    const getData= await client.query(({\r\n      query:POST_COMMENT,\r\n      variables:{id}\r\n    }))\r\n    return{ props: { getData}}\r\n  }\r\n  catch(error){\r\n    return { props: { statusCode: 404 } }\r\n  }\r\n\r\n}\r\n\r\nfunction LoginCheck() {\r\n  return (\r\n    <div className={style.commentLogin}>\r\n    <Link href=\"/login\">\r\n      <a target=\"_blank\"> Login Now</a>\r\n    </Link>\r\n   </div>\r\n      \r\n    \r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}