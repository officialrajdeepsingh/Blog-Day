{"ast":null,"code":"import gql from 'graphql-tag';\nexport const POST_QUERY = gql`query postData {\n  generalSettings {\n    url\n    description\n    timezone\n    title\n  }\n\n  __typename\n  posts{\n  edges{\n    node {\n      id\n      title\n      slug\n      excerpt\n      categories {\n        nodes {\n          name\n          id\n        }\n      }\n      featuredImage {\n          altText\n          title\n          sourceUrl        \n      }\n    }\n    }\n  }\n}`;\nexport const POST_READ = gql`query GET_POST($id: ID!) {\n    post(id: $id) {\n       id\n       commentCount\n       title\n       content\n       dateGmt\n       modifiedGmt\n       slug\n       date\n       excerpt\n       commentStatus\n       featuredImage {\n         altText\n         sourceUrl\n         title\n       }\n       categories {\n         edges {\n           node {\n             name\n           }\n         }\n       }\n       author {\n         name\n         avatar {\n           url\n         }\n       }\n       categories {\n        nodes {\n          posts {\n            nodes {\n              title\n              id\n              slug\n              featuredImage{\n                sourceUrl\n                altText\n              }\n            }\n          }\n        }\n      }\n     }\n   }`;\nexport const POST_HEADER = gql`query Menu {\n  __typename\n menu(id:\"TWVudToz\") {\n    id\n    name\n    slug\n     menuItems {\n        nodes {\n          label\n          menuItemId\n          id\n          url\n          connectedObject {\n            __typename\n            ... on Page {\n              id\n              title\n              slug\n            }\n            ... on Post {\n              id\n              title\n            }\n          }\n        }\n      }\n  }\n}`;\nconst POST_FOOTER = `{\n menu(id:\"TWVudToyMw==\") {\n    id\n    name\n    slug\n     menuItems {\n        nodes {\n          label\n          menuItemId\n          id\n          url\n          connectedObject {\n            __typename\n            ... on Page {\n              id\n              title\n              slug\n            }\n            ... on Post {\n              id\n              title\n            }\n          }\n        }\n      }\n  }\n}`;\nexport default POST_FOOTER;\nexport const POST_COMMENT = gql`query GET_POST($id: ID!) {\n  post(id: $id) {\n    id\n    title\n    slug\n    date\n    postId\n    featuredImage {\n      altText\n      sourceUrl\n    }\n    author {\n      userId\n      name\n    }\n    comments {\n      nodes {\n        ...CommentFields\n        replies: children {\n          nodes {\n            ...CommentFields\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  id\n  approved\n  content\n  author {\n    ... on CommentAuthor {\n      name\n    }\n  }\n}`;\nexport const PAGE_QUERY = gql`query GET_PAGE($id: ID!) {       \n  page(id: $id) {\n      content\n      title\n      featuredImage {\n        altText\n        sourceUrl(size: LARGE)\n        id\n      }\n    }\n  \n }`;\nexport const POST_SEARCH = `query Search($search:String!) {\n  posts(where: {search: $search}) {\n  nodes {\n      id\n      slug\n      title\n      featuredImage {\n      sourceUrl\n      altText\n      }\n      author {\n          name\n      }\n  }\n  }\n}`;\nexport const SIGNUP_MUTATION = `mutation MyMutation($userData: RegisterUserInput!) {\n  registerUser(input: $userData) {\n    clientMutationId\n    user {\n      email\n      id\n      jwtAuthToken\n      userId\n      username\n    }\n  }\n}`;\nexport const COMMENT_MUTATION = `\nmutation CREATE_COMMENT($input: CreateCommentInput!) {\n    createComment(input: $input ) {\n        success\n        clientMutationId\n    }\n}\n`;\nexport const LOGIN_MUTATION = `mutation LoginUser($username : String!, $password : String!) {\n  login( input: {\n    clientMutationId:\"uniqueId\"\n    username: $username\n    password: $password\n  } ) {\n    authToken\n    user {\n      userId\n      username\n      name\n    }\n  }\n}`;","map":null,"metadata":{},"sourceType":"module"}