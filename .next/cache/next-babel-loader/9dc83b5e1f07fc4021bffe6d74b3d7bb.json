{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query Search($searchFind:String!) {\\n            posts(where: {search: $searchFind}) {\\n            nodes {\\n                id\\n                slug\\n                title\\n                featuredImage {\\n                sourceUrl\\n                altText\\n                }\\n                author {\\n                    name\\n                }\\n            }\\n            }\\n        }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { client } from \"../apollo-client\";\nimport style from '../css/Searchbar.module.scss';\n\nvar Searchbar = /*#__PURE__*/function (_Component) {\n  _inherits(Searchbar, _Component);\n\n  var _super = _createSuper(Searchbar);\n\n  function Searchbar(props) {\n    var _this;\n\n    _classCallCheck(this, Searchbar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"sumbitHandler\", function (e) {\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeHandler\", function (e) {\n      _this.getDataQuery(_this.state.search);\n\n      _this.setState({\n        search: e.target.value\n      });\n    });\n\n    _this.state = {\n      search: '',\n      data: {}\n    };\n    return _this;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"getDataQuery\",\n    value: function getDataQuery(search) {\n      var searchFind, POST_QUERY, res;\n      return _regeneratorRuntime.async(function getDataQuery$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              searchFind = search;\n              POST_QUERY = gql(_templateObject());\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(client.query({\n                query: POST_QUERY,\n                variables: {\n                  searchFind: searchFind\n                }\n              }));\n\n            case 4:\n              res = _context.sent;\n              console.log(res, ' res');\n              this.setState({\n                data: res\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: style.bar\n      }, __jsx(Container, {\n        className: style.box,\n        maxWidth: \"sm\"\n      }, __jsx(\"form\", {\n        className: style.formRoot,\n        onSubmit: this.sumbitHandler,\n        noValidate: true,\n        autoComplete: \"off\"\n      }, __jsx(TextField, {\n        onChange: this.changeHandler,\n        id: \"standard-secondary\",\n        className: style.rootText,\n        label: \"Search Here\"\n      })), this.state.data.data ? this.state.data.data.posts.nodes.map(function (postData) {\n        return __jsx(List, {\n          key: postData.id,\n          className: style.rootList\n        }, __jsx(Link, {\n          href: \"/[read]?id=\".concat(postData.id),\n          as: \"\".concat(postData.slug, \"-\").concat(postData.id)\n        }, __jsx(ListItem, {\n          button: true,\n          alignItems: \"flex-start\"\n        }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n          alt: postData.featuredImage.altText,\n          src: postData.featuredImage.sourceUrl\n        })), __jsx(ListItemText, {\n          primary: postData.title,\n          secondary: __jsx(Typography, {\n            component: \"span\",\n            variant: \"body2\",\n            className: style.inline,\n            color: \"textPrimary\"\n          }, postData.author.name)\n        }))));\n      }) : ''));\n    }\n  }]);\n\n  return Searchbar;\n}(Component);\n\nexport { Searchbar as default };","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/Header/Searchbar.js"],"names":["React","Component","useState","Container","TextField","List","ListItem","Divider","ListItemText","ListItemAvatar","Avatar","Typography","Link","useQuery","gql","client","style","Searchbar","props","e","preventDefault","getDataQuery","state","search","setState","target","value","data","searchFind","POST_QUERY","query","variables","res","console","log","bar","box","formRoot","sumbitHandler","changeHandler","rootText","posts","nodes","map","postData","id","rootList","slug","featuredImage","altText","sourceUrl","title","inline","author","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAAQC,MAAR,QAAqB,kBAArB;AAGA,OAAOC,KAAP,MAAkB,8BAAlB;;IAKqBC,S;;;;;AAEjB,qBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;;AADc,oEA+CF,UAACC,CAAD,EAAK;AACjBA,MAAAA,CAAC,CAACC,cAAF;AACF,KAjDgB;;AAAA,oEAmDA,UAACD,CAAD,EAAK;AACnB,YAAKE,YAAL,CAAkB,MAAKC,KAAL,CAAWC,MAA7B;;AACC,YAAKC,QAAL,CAAc;AACVD,QAAAA,MAAM,EAAEJ,CAAC,CAACM,MAAF,CAASC;AADP,OAAd;AAGH,KAxDgB;;AAGd,UAAKJ,KAAL,GAAW;AACPC,MAAAA,MAAM,EAAC,EADA;AAEPI,MAAAA,IAAI,EAAC;AAFE,KAAX;AAHc;AAQjB;;;;iCAEmBJ,M;;;;;;AACVK,cAAAA,U,GAAYL,M;AACZM,cAAAA,U,GAAaf,G;;+CAiBFC,MAAM,CAACe,KAAP,CAAc;AAC3BA,gBAAAA,KAAK,EAACD,UADqB;AAE3BE,gBAAAA,SAAS,EAAC;AAACH,kBAAAA,UAAU,EAAVA;AAAD;AAFiB,eAAd,C;;;AAAXI,cAAAA,G;AAKNC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,MAAjB;AACA,mBAAKR,QAAL,CAAc;AACVG,gBAAAA,IAAI,EAACK;AADK,eAAd;;;;;;;;;;;6BAwBK;AAEL,aACK;AAAK,QAAA,SAAS,EAAEhB,KAAK,CAACmB;AAAtB,SACG,MAAC,SAAD;AAAW,QAAA,SAAS,EAAEnB,KAAK,CAACoB,GAA5B;AAAiC,QAAA,QAAQ,EAAC;AAA1C,SACI;AAAM,QAAA,SAAS,EAAEpB,KAAK,CAACqB,QAAvB;AAAiC,QAAA,QAAQ,EAAE,KAAKC,aAAhD;AAAgE,QAAA,UAAU,MAA1E;AAA2E,QAAA,YAAY,EAAC;AAAxF,SACI,MAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKC,aAA1B;AAAyC,QAAA,EAAE,EAAC,oBAA5C;AAAkE,QAAA,SAAS,EAAEvB,KAAK,CAACwB,QAAnF;AAA6F,QAAA,KAAK,EAAC;AAAnG,QADJ,CADJ,EAMI,KAAKlB,KAAL,CAAWK,IAAX,CAAgBA,IAAhB,GACI,KAAKL,KAAL,CAAWK,IAAX,CAAgBA,IAAhB,CAAqBc,KAArB,CAA2BC,KAA3B,CAAiCC,GAAjC,CACI,UAAAC,QAAQ,EAAE;AACN,eACI,MAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,QAAQ,CAACC,EAApB;AAAwB,UAAA,SAAS,EAAE7B,KAAK,CAAC8B;AAAzC,WACI,MAAC,IAAD;AAAM,UAAA,IAAI,uBAAgBF,QAAQ,CAACC,EAAzB,CAAV;AAAyC,UAAA,EAAE,YAAMD,QAAQ,CAACG,IAAf,cAAuBH,QAAQ,CAACC,EAAhC;AAA3C,WACI,MAAC,QAAD;AAAU,UAAA,MAAM,EAAE,IAAlB;AAAyB,UAAA,UAAU,EAAC;AAApC,WACI,MAAC,cAAD,QACI,MAAC,MAAD;AAAQ,UAAA,GAAG,EAAED,QAAQ,CAACI,aAAT,CAAuBC,OAApC;AAA6C,UAAA,GAAG,EAAEL,QAAQ,CAACI,aAAT,CAAuBE;AAAzE,UADJ,CADJ,EAII,MAAC,YAAD;AACI,UAAA,OAAO,EAAEN,QAAQ,CAACO,KADtB;AAEI,UAAA,SAAS,EACT,MAAC,UAAD;AACQ,YAAA,SAAS,EAAC,MADlB;AAEQ,YAAA,OAAO,EAAC,OAFhB;AAGQ,YAAA,SAAS,EAAEnC,KAAK,CAACoC,MAHzB;AAIQ,YAAA,KAAK,EAAC;AAJd,aAMSR,QAAQ,CAACS,MAAT,CAAgBC,IANzB;AAHJ,UAJJ,CADJ,CADJ,CADJ;AAwBH,OA1BL,CADJ,GA8BI,EApCR,CADH,CADL;AA6CH;;;;EA5GkCrD,S;;SAAlBgB,S","sourcesContent":["import React, { Component,useState  } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from 'next/link'\r\n\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../apollo-client\";\r\n\r\n\r\nimport style from '../css/Searchbar.module.scss';\r\n\r\n\r\n\r\n\r\nexport default class Searchbar extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state={\r\n            search:'',\r\n            data:{}\r\n        }\r\n       \r\n    }\r\n\r\n     async getDataQuery(search){\r\n        const searchFind= search \r\n        const POST_QUERY = gql`query Search($searchFind:String!) {\r\n            posts(where: {search: $searchFind}) {\r\n            nodes {\r\n                id\r\n                slug\r\n                title\r\n                featuredImage {\r\n                sourceUrl\r\n                altText\r\n                }\r\n                author {\r\n                    name\r\n                }\r\n            }\r\n            }\r\n        }`\r\n      \r\n        const res= await client.query(({\r\n            query:POST_QUERY,\r\n            variables:{searchFind}\r\n        }))\r\n\r\n        console.log(res, ' res')\r\n        this.setState({\r\n            data:res\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n \r\n\r\n\r\n    sumbitHandler = (e)=>{\r\n        e.preventDefault();\r\n     }\r\n    \r\n      changeHandler = (e)=>{\r\n        this.getDataQuery(this.state.search)\r\n         this.setState({\r\n             search :e.target.value\r\n         })\r\n     }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n             <div className={style.bar}> \r\n                <Container className={style.box} maxWidth=\"sm\" >\r\n                    <form className={style.formRoot} onSubmit={this.sumbitHandler}  noValidate autoComplete=\"off\">\r\n                        <TextField onChange={this.changeHandler} id=\"standard-secondary\"  className={style.rootText} label=\"Search Here\" />\r\n                    </form>  \r\n                   \r\n                   {\r\n                    this.state.data.data?  (\r\n                        this.state.data.data.posts.nodes.map(\r\n                            postData=>{\r\n                                return(\r\n                                    <List key={postData.id} className={style.rootList}>\r\n                                        <Link href={`/[read]?id=${postData.id}`} as={ `${postData.slug}-${postData.id}`} >\r\n                                            <ListItem button={true}  alignItems=\"flex-start\">\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar alt={postData.featuredImage.altText} src={postData.featuredImage.sourceUrl} />\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText\r\n                                                    primary={postData.title}\r\n                                                    secondary={ \r\n                                                    <Typography\r\n                                                            component=\"span\"\r\n                                                            variant=\"body2\"\r\n                                                            className={style.inline}\r\n                                                            color=\"textPrimary\"\r\n                                                        >\r\n                                                            {postData.author.name}\r\n                                                        </Typography>                                                                   \r\n                                                    }  \r\n                                                />\r\n                                            </ListItem>\r\n                                        </Link> \r\n                                    </List>\r\n                                )\r\n                            }\r\n                        )\r\n\r\n                    ) : ''\r\n                   \r\n                   \r\n                   }\r\n                </Container>\r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}