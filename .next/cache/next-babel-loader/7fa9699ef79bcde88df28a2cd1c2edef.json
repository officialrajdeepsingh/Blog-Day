{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport style from '../Component/css/Read.module.scss';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport { parseISO, format } from 'date-fns';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_READ } from \"../Component/graphalQurey\";\nimport { useRouter } from 'next/router';\nimport { client } from \"../Component/apollo-client\";\nimport ReadCard from \"../Component/Read/ReadCard\";\nimport { NextSeo, BlogJsonLd } from 'next-seo';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport Head from 'next/head';\nexport default function Read(props) {\n  // const { getData,concerter }= props;  \n  if (props.concerter) {\n    return __jsx(Error, null);\n  }\n\n  return null;\n}\nexport const getServerSideProps = async ({\n  pathname,\n  query,\n  asPath,\n  req,\n  res,\n  err\n}) => {\n  if (query.slug) {\n    const id = query.slug;\n\n    try {\n      const getData = await client.query({\n        query: POST_READ,\n        variables: {\n          id\n        }\n      });\n      return {\n        props: {\n          getData\n        }\n      };\n    } catch (error) {\n      console.log(error, ' read ');\n      const concerter = JSON.stringify(error);\n      return {\n        props: {\n          concerter\n        }\n      };\n    }\n  } else {\n    const id = query.Read.split('-').pop();\n\n    try {\n      const getData = await client.query({\n        query: POST_READ,\n        variables: {\n          id\n        }\n      });\n      consol.log(getData, ' inside read in ssr ');\n      return {\n        props: {\n          getData\n        }\n      };\n    } catch (error) {\n      console.log(error, ' read ');\n      const concerter = JSON.stringify(error);\n      return {\n        props: {\n          concerter\n        }\n      };\n    }\n  }\n};","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/[Read].js"],"names":["React","Component","style","Typography","Container","CardMedia","Grid","Card","CardActionArea","CardContent","CardActions","parseISO","format","Avatar","POST_READ","useRouter","client","ReadCard","NextSeo","BlogJsonLd","Link","gql","Head","Read","props","concerter","getServerSideProps","pathname","query","asPath","req","res","err","slug","id","getData","variables","error","console","log","JSON","stringify","split","pop","consol"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,SAAR,QAAwB,2BAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAAQC,MAAR,QAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,OAAT,EAAiBC,UAAjB,QAAmC,UAAnC;AAGA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC;AAEA,MAAIA,KAAK,CAACC,SAAV,EAAqB;AACnB,WAAO,MAAC,KAAD,OAAP;AACD;;AAED,SAAO,IAAP;AACD;AAGD,OAAO,MAAOC,kBAAkB,GAAI,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,MAAnB;AAA2BC,EAAAA,GAA3B;AAAgCC,EAAAA,GAAhC;AAAqCC,EAAAA;AAArC,CAAP,KAAqD;AAEjF,MAAGJ,KAAK,CAACK,IAAT,EAAc;AACZ,UAAMC,EAAE,GAACN,KAAK,CAACK,IAAf;;AACI,QAAI;AACF,YAAME,OAAO,GAAE,MAAMnB,MAAM,CAACY,KAAP,CAAc;AAC/BA,QAAAA,KAAK,EAACd,SADyB;AAE/BsB,QAAAA,SAAS,EAAC;AAACF,UAAAA;AAAD;AAFqB,OAAd,CAArB;AAIA,aAAO;AAACV,QAAAA,KAAK,EAAC;AAAEW,UAAAA;AAAF;AAAP,OAAP;AACL,KANG,CAOJ,OAAME,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAoB,QAApB;AACA,YAAMZ,SAAS,GAAGe,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAlB;AACA,aAAO;AAAEb,QAAAA,KAAK,EAAE;AAACC,UAAAA;AAAD;AAAT,OAAP;AACD;AACF,GAdD,MAeK;AACD,UAAMS,EAAE,GAAEN,KAAK,CAACL,IAAN,CAAWmB,KAAX,CAAkB,GAAlB,EAAwBC,GAAxB,EAAV;;AACA,QAAI;AACF,YAAMR,OAAO,GAAE,MAAMnB,MAAM,CAACY,KAAP,CAAc;AAC/BA,QAAAA,KAAK,EAACd,SADyB;AAE/BsB,QAAAA,SAAS,EAAC;AAACF,UAAAA;AAAD;AAFqB,OAAd,CAArB;AAIAU,MAAAA,MAAM,CAACL,GAAP,CAAWJ,OAAX,EAAqB,sBAArB;AACA,aAAO;AAACX,QAAAA,KAAK,EAAC;AAAEW,UAAAA;AAAF;AAAP,OAAP;AAED,KARD,CASA,OAAME,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAoB,QAApB;AACG,YAAMZ,SAAS,GAAGe,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAlB;AACH,aAAO;AAAEb,QAAAA,KAAK,EAAE;AAACC,UAAAA;AAAD;AAAT,OAAP;AACD;AACF;AACV,CAlCM","sourcesContent":["import React,{Component} from 'react';\r\nimport style from '../Component/css/Read.module.scss'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { parseISO, format } from 'date-fns'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_READ} from \"../Component/graphalQurey\"\r\nimport { useRouter } from 'next/router'\r\nimport {client} from \"../Component/apollo-client\";\r\nimport ReadCard from \"../Component/Read/ReadCard\";\r\nimport { NextSeo,BlogJsonLd } from 'next-seo';\r\n\r\n\r\nimport Link from 'next/link';\r\nimport gql from 'graphql-tag';\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function Read(props) {\r\n  // const { getData,concerter }= props;  \r\n \r\n  if (props.concerter) {\r\n    return <Error  />\r\n  }\r\n \r\n  return null\r\n}\r\n\r\n\r\nexport const  getServerSideProps =  async ({ pathname, query, asPath, req, res, err }) =>{               \r\n        \r\n        if(query.slug){\r\n          const id=query.slug\r\n              try {\r\n                const getData= await client.query(({\r\n                    query:POST_READ,\r\n                    variables:{id}\r\n                }))\r\n                return {props:{ getData}}\r\n          }\r\n          catch(error){\r\n            console.log(error , ' read ')\r\n            const concerter = JSON.stringify(error)\r\n            return { props: {concerter} }\r\n          }\r\n        }\r\n        else {\r\n            const id= query.Read.split( '-' ).pop()\r\n            try {\r\n              const getData= await client.query(({\r\n                  query:POST_READ,\r\n                  variables:{id}\r\n              }))\r\n              consol.log(getData , ' inside read in ssr ')\r\n              return {props:{ getData}}\r\n\r\n            }\r\n            catch(error){\r\n              console.log(error , ' read ')\r\n                 const concerter = JSON.stringify(error)\r\n              return { props: {concerter} }\r\n            }\r\n          }    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}