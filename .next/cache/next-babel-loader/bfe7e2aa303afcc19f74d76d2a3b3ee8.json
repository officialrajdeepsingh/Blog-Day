{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"mutation MyMutation($userData:RegisterUserInput!) {\\n                __typename\\n                createUser(input: $userData) {\\n                    clientMutationId\\n                  }\\n            } \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Layout from '../Component/Layout';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from 'next/link';\nimport style from '../Component/css/Signup.module.scss';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport signupImage from '../Component/asset/signupImage.png'; // with SWR and graphql-request\n\nimport { request } from 'graphql-request';\nimport { POST_SEARCH } from \"../graphalQurey\";\nvar CREATE_JOB_POST_MUTATION =\n/* GraphQL */\n\"\\n  mutation createJobPostMutation($jobName: String!) {\\n    createOneJobPost(jobName: $jobName) {\\n      id\\n    }\\n  }\\n\";\n\nvar createJobPost = function createJobPost(variables) {\n  return request('/api', CREATE_JOB_POST_MUTATION, variables);\n};\n\nvar yourReactComponent = function yourReactComponent(_ref) {\n  var id = _ref.id;\n\n  var submitJobPost = function submitJobPost(jobName) {\n    var data;\n    return _regeneratorRuntime.async(function submitJobPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(createJobPost({\n              jobName: jobName\n            }));\n\n          case 2:\n            data = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexport default function Signup(props) {\n  // mutation query with gql\n  var getInfoSignup = gql(_templateObject());\n\n  var _useState = useState(\"\"),\n      passward = _useState[0],\n      setPassward = _useState[1];\n\n  var _useState2 = useState(false),\n      showPassword = _useState2[0],\n      setShowPassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      showconfirmPassword = _useState3[0],\n      setShowconfirmPassword = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      confirmPassword = _useState4[0],\n      setConfirmPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      matchPassward = _useState5[0],\n      setMatchPassward = _useState5[1];\n\n  var _useState6 = useState(true),\n      checkbox = _useState6[0],\n      setCheckbox = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      userName = _useState7[0],\n      setuserName = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      gmail = _useState8[0],\n      setgmail = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      displayName = _useState9[0],\n      setDisplayName = _useState9[1]; // useMutation hook \n\n\n  var _useMutation = useMutation(getInfoSignup),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createUser = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      data = _useMutation2$.data,\n      error = _useMutation2$.error; // hender error on this way \n  // Read on stackoverFlow https://stackoverflow.com/questions/59465864/handling-errors-with-react-apollo-usemutation-hook#:~:text=Apollo%20Client%20actually%20provides%20four%20different%20ways%20to%20handle%20mutation%20errors%3A&text=Calling%20the%20mutate%20function%20returned,data%20returned%20by%20the%20server.\n  //     const [createUser, { data, loading, error }] = useMutation(getInfoSignup, {\n  //         variables:{\n  //             userData:{\n  //                 username: \"RajdeepSingh420\",\n  //                 email: \"RajdeepSingh420@GMAIL.COM\",\n  //                 password: \"RajdeepSingh420\",\n  //                 revokeJwtUserSecret: true,\n  //                 displayName: \"Rajdeep Singh 420\",\n  //                 clientMutationId: \"registerUser\",\n  //                 nicename: \"RajdeepSingh420\",\n  //                 registered: \"true\", \n  //             }\n  //         },\n  //         onError(err) {\n  //             console.log(err);\n  //         },\n  // });\n  // form  handler function \n\n\n  var handleChange = function handleChange(event) {\n    setPassward(event.target.value);\n  };\n\n  var handleClickShowPassword = function handleClickShowPassword() {\n    setShowPassword(!showPassword);\n  };\n\n  var confirmHandleChange = function confirmHandleChange(event) {\n    setConfirmPassword(event.target.value);\n\n    if (passward === event.target.value) {\n      setMatchPassward(false);\n    } else {\n      setMatchPassward(true);\n    }\n  };\n\n  var confirmHandleClickShowPassword = function confirmHandleClickShowPassword() {\n    setShowconfirmPassword(!showPassword);\n  };\n\n  var checkboxChange = function checkboxChange() {\n    setCheckbox(!checkbox);\n  };\n\n  var handleMouseDownPassword = function handleMouseDownPassword() {};\n\n  var submitFormUser = function submitFormUser(event) {\n    event.preventDefault();\n    createUser({\n      variables: {\n        userData: {\n          username: {\n            userName: userName\n          },\n          email: {\n            gmail: gmail\n          },\n          password: {\n            passward: passward\n          },\n          revokeJwtUserSecret: true,\n          displayName: {\n            displayName: displayName\n          },\n          clientMutationId: \"registerUser\"\n        }\n      }\n    });\n  }; // testing show error \n\n\n  console.log(data, ' submit'); // undefined \n\n  console.log(error, ' submit error'); // Network error: Unexpected end of JSON input\n\n  return __jsx(Container, {\n    className: style.containerBox\n  }, __jsx(Card, {\n    className: style.root\n  }, __jsx(\"div\", {\n    className: style.innerCard\n  }, __jsx(\"div\", {\n    className: style.details\n  }, __jsx(CardContent, {\n    className: style.cardContentInner\n  }, __jsx(Typography, {\n    className: style.typeH5,\n    component: \"h6\",\n    variant: \"h6\"\n  }, \"Welcome Back!\"), __jsx(Typography, {\n    className: style.typeH3,\n    component: \"h3\",\n    variant: \"h2\"\n  }, \"Learn With Me\"), __jsx(\"form\", {\n    //  on Submit handler  \n    onSubmit: submitFormUser,\n    className: style.form,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(TextField, {\n    onChange: function onChange(e) {\n      return setDisplayName(e.target.value);\n    },\n    id: \"fullName\",\n    className: style.textControl,\n    placeholder: \" Exmple:Rajdeep Singh  \",\n    label: \"Full Name\"\n  }), __jsx(TextField, {\n    onChange: function onChange(e) {\n      return setuserName(e.target.value);\n    },\n    id: \"userName\",\n    className: style.textControl,\n    placeholder: \" Exmple:Officialrajdeepsingh  \",\n    label: \"User Name\"\n  }), __jsx(TextField, {\n    onChange: function onChange(e) {\n      return setgmail(e.target.value);\n    },\n    id: \"userGmail\",\n    className: style.textControl,\n    placeholder: \" 123@gmail.com  \",\n    label: \"Gmail\"\n  }), __jsx(FormControl, {\n    className: style.textControl\n  }, __jsx(InputLabel, {\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Input, {\n    id: \"password\",\n    type: showPassword ? 'text' : 'password',\n    value: passward,\n    onChange: handleChange,\n    placeholder: \"Exmple: Rb@1%2^3*56\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword\n    }, showPassword ? __jsx(Visibility, null) : __jsx(VisibilityOff, null)))\n  })), __jsx(FormControl, {\n    className: style.textControl\n  }, __jsx(InputLabel, {\n    htmlFor: \"confirmPassword\"\n  }, \"Confirm Password\"), __jsx(Input, {\n    id: \"confirmPassword\",\n    type: showconfirmPassword ? 'text' : 'password',\n    value: confirmPassword,\n    onChange: confirmHandleChange,\n    error: matchPassward,\n    paceholder: \"Exmple Confirm Passward :  Rb@1%2^3*56\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: confirmHandleClickShowPassword,\n      onMouseDown: handleMouseDownPassword\n    }, showPassword ? __jsx(Visibility, null) : __jsx(VisibilityOff, null)))\n  })), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: checkbox,\n      onChange: checkboxChange,\n      name: \"checkBox\",\n      color: \"primary\",\n      className: style.checkBox\n    }),\n    label: \"I Agree to Terms & Conditions \"\n  }), __jsx(Button, {\n    type: \"submit\" //  send data on this button \n    ,\n    className: style.productButton,\n    size: \"small\"\n  }, \"Submit\"))), __jsx(\"div\", {\n    className: style.typeLogin\n  }, __jsx(React.Fragment, null, __jsx(Typography, {\n    className: style.anchorLink,\n    component: \"h6\",\n    variant: \"h6\"\n  }, \"Login With Me\"), __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", null, \" Click Here  \"))))), __jsx(CardMedia, {\n    component: \"img\",\n    alt: \"signup Image\",\n    image: signupImage,\n    title: \"signup Now \",\n    className: style.cardImage\n  }))));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/signup.js"],"names":["React","useState","Layout","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","Container","IconButton","Input","FilledInput","OutlinedInput","InputLabel","InputAdornment","FormHelperText","FormControl","TextField","Visibility","VisibilityOff","FormGroup","FormControlLabel","Checkbox","Link","style","gql","useMutation","signupImage","request","POST_SEARCH","CREATE_JOB_POST_MUTATION","createJobPost","variables","yourReactComponent","id","submitJobPost","jobName","data","Signup","props","getInfoSignup","passward","setPassward","showPassword","setShowPassword","showconfirmPassword","setShowconfirmPassword","confirmPassword","setConfirmPassword","matchPassward","setMatchPassward","checkbox","setCheckbox","userName","setuserName","gmail","setgmail","displayName","setDisplayName","createUser","error","handleChange","event","target","value","handleClickShowPassword","confirmHandleChange","confirmHandleClickShowPassword","checkboxChange","handleMouseDownPassword","submitFormUser","preventDefault","userData","username","email","password","revokeJwtUserSecret","clientMutationId","console","log","containerBox","root","innerCard","details","cardContentInner","typeH5","typeH3","form","e","textControl","checkBox","productButton","typeLogin","anchorLink","cardImage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from '../Component/Layout'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from 'next/link'\r\n\r\n\r\nimport style from '../Component/css/Signup.module.scss'\r\n\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport signupImage from '../Component/asset/signupImage.png'\r\n\r\n\r\n// with SWR and graphql-request\r\nimport { request } from 'graphql-request';\r\nimport {POST_SEARCH} from \"../graphalQurey\"\r\n\r\n\r\n\r\nconst CREATE_JOB_POST_MUTATION = /* GraphQL */ `\r\n  mutation createJobPostMutation($jobName: String!) {\r\n    createOneJobPost(jobName: $jobName) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst createJobPost = (variables) => {\r\n  return request('/api', CREATE_JOB_POST_MUTATION, variables);\r\n};\r\n\r\nconst yourReactComponent = ({ id }) => {\r\n  const submitJobPost = async (jobName) => {\r\n    const data = await createJobPost({ jobName });\r\n    // do something with data\r\n  };\r\n};\r\n\r\n\r\nexport default function Signup(props) {\r\n\r\n    // mutation query with gql\r\n    const getInfoSignup = gql`mutation MyMutation($userData:RegisterUserInput!) {\r\n                __typename\r\n                createUser(input: $userData) {\r\n                    clientMutationId\r\n                  }\r\n            } \r\n`\r\n    \r\n\r\n    const [passward, setPassward] = useState(\"\");\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showconfirmPassword, setShowconfirmPassword] = useState(false);\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [matchPassward, setMatchPassward] = useState(false);\r\n    const [checkbox, setCheckbox] = useState(true);\r\n    const [userName, setuserName] = useState(\"\");\r\n    const [gmail, setgmail] = useState(\"\");\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n\r\n    // useMutation hook \r\n    \r\n    const [createUser, { data , error}  ] = useMutation(getInfoSignup);\r\n\r\n    // hender error on this way \r\n    // Read on stackoverFlow https://stackoverflow.com/questions/59465864/handling-errors-with-react-apollo-usemutation-hook#:~:text=Apollo%20Client%20actually%20provides%20four%20different%20ways%20to%20handle%20mutation%20errors%3A&text=Calling%20the%20mutate%20function%20returned,data%20returned%20by%20the%20server.\r\n\r\n    //     const [createUser, { data, loading, error }] = useMutation(getInfoSignup, {\r\n//         variables:{\r\n//             userData:{\r\n//                 username: \"RajdeepSingh420\",\r\n//                 email: \"RajdeepSingh420@GMAIL.COM\",\r\n//                 password: \"RajdeepSingh420\",\r\n//                 revokeJwtUserSecret: true,\r\n//                 displayName: \"Rajdeep Singh 420\",\r\n//                 clientMutationId: \"registerUser\",\r\n//                 nicename: \"RajdeepSingh420\",\r\n//                 registered: \"true\", \r\n//             }\r\n//         },\r\n//         onError(err) {\r\n//             console.log(err);\r\n//         },\r\n// });\r\n  \r\n\r\n\r\n   // form  handler function \r\n     const handleChange = (event) => {\r\n        setPassward( event.target.value )  \r\n      };\r\n    \r\n      const  handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword)\r\n      };\r\n\r\n    const confirmHandleChange = (event) => {\r\n        setConfirmPassword( event.target.value)\r\n       \r\n      if( passward === event.target.value ){\r\n        setMatchPassward(false)\r\n      }else{\r\n        setMatchPassward(true)\r\n      }\r\n\r\n    };\r\n    \r\n   const  confirmHandleClickShowPassword = () => {\r\n       setShowconfirmPassword(!showPassword)\r\n    };\r\n    const checkboxChange=()=>{\r\n        setCheckbox(!checkbox)\r\n    }\r\n\r\n    const handleMouseDownPassword=()=>{\r\n\r\n    }\r\n\r\n    const submitFormUser=(event)=>{\r\n        event.preventDefault();\r\n          createUser(\r\n            { \r\n              variables:{\r\n                    userData:{\r\n                        username: {userName},\r\n                        email: {gmail},\r\n                        password: {passward},\r\n                        revokeJwtUserSecret: true,\r\n                        displayName: {displayName},\r\n                        clientMutationId: \"registerUser\",\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        );\r\n        }\r\n    // testing show error \r\n    \r\n    console.log(data, ' submit' ) // undefined \r\n    console.log(error, ' submit error')  // Network error: Unexpected end of JSON input\r\n\r\n        return (\r\n                <Container className={style.containerBox}>\r\n                    <Card className={style.root} >\r\n                        <div className={style.innerCard}>\r\n                            <div className={style.details}>\r\n                                <CardContent className={style.cardContentInner}>\r\n                                    <Typography className={style.typeH5} component=\"h6\" variant=\"h6\">\r\n                                        Welcome Back!\r\n                                    </Typography>\r\n                                    <Typography className={style.typeH3} component=\"h3\" variant=\"h2\">\r\n                                        Learn With Me\r\n                                    </Typography>\r\n                                    <form \r\n                                           //  on Submit handler  \r\n                                        onSubmit={submitFormUser}\r\n                                        className={style.form}\r\n                                        noValidate autoComplete=\"off\"\r\n                                      >\r\n                                        <TextField onChange={(e)=>setDisplayName(e.target.value)} id=\"fullName\" className={style.textControl} placeholder=' Exmple:Rajdeep Singh  ' label=\"Full Name\" />\r\n                                        <TextField onChange={(e)=>setuserName(e.target.value)}  id=\"userName\" className={style.textControl} placeholder=' Exmple:Officialrajdeepsingh  ' label=\"User Name\" />\r\n                                        <TextField onChange={(e)=>setgmail(e.target.value)}  id=\"userGmail\" className={style.textControl} placeholder=' 123@gmail.com  ' label=\"Gmail\" />\r\n\r\n                                        <FormControl className={style.textControl} >\r\n                                            <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                                            <Input\r\n                                                id=\"password\"\r\n                                                type= {showPassword ? 'text' : 'password'}\r\n                                                value={passward}\r\n                                                onChange={handleChange}\r\n                                                placeholder='Exmple: Rb@1%2^3*56'\r\n                                                endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                            aria-label=\"toggle password visibility\"\r\n                                                            onClick={handleClickShowPassword}\r\n                                                            onMouseDown={handleMouseDownPassword}\r\n                                                        >\r\n                                                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n\r\n                                        <FormControl className={style.textControl} >\r\n                                            <InputLabel htmlFor=\"confirmPassword\">Confirm Password</InputLabel>\r\n                                            <Input\r\n                                                id=\"confirmPassword\"\r\n                                                type= {showconfirmPassword ? 'text' : 'password'}\r\n                                                value={confirmPassword}\r\n                                                onChange={confirmHandleChange}\r\n                                                error={matchPassward}\r\n                                                paceholder='Exmple Confirm Passward :  Rb@1%2^3*56'\r\n                                                endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                            aria-label=\"toggle password visibility\"\r\n                                                            onClick={confirmHandleClickShowPassword}\r\n                                                            onMouseDown={handleMouseDownPassword}\r\n                                                        >\r\n                                                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                \r\n                                                <Checkbox\r\n                                                    checked={checkbox}\r\n                                                    onChange={checkboxChange}\r\n                                                    name=\"checkBox\"\r\n                                                    color=\"primary\"\r\n                                                    className={ style.checkBox }\r\n                                                />\r\n\r\n                                            }\r\n                                            \r\n                                            label=\"I Agree to Terms & Conditions \"\r\n                                            \r\n                                        />\r\n                                        \r\n                                        <Button type=\"submit\"\r\n                                            //  send data on this button \r\n                                           className={style.productButton} size=\"small\">\r\n                                               Submit\r\n                                    </Button>\r\n                                    </form>\r\n\r\n\r\n                                </CardContent>\r\n                                \r\n\r\n                                <div className={style.typeLogin}> \r\n                                    <>\r\n                                        <Typography className={style.anchorLink}  component=\"h6\" variant=\"h6\">\r\n                                                Login With Me \r\n                                        </Typography>\r\n                                        <Link  href=\"/login\">\r\n                                             <a> Click Here  </a> \r\n                                        </Link>\r\n                                    </>\r\n\r\n                                </div>    \r\n\r\n                            </div>\r\n\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                alt=\"signup Image\"\r\n                                image={signupImage}\r\n                                title=\"signup Now \"\r\n                                className={style.cardImage}\r\n                            />\r\n\r\n                        </div>\r\n                    </Card>\r\n                </Container>\r\n        )\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}