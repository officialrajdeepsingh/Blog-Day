{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss';\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nexport default function CommentEditor(props) {\n  const CommentAdd = gql`\n        mutation CREATE_COMMENT($input: CreateCommentInput!) {\n            createComment(input: $input ) {\n                success\n                clientMutationId\n            }\n        }\n    `;\n  const [value, setValue] = React.useState();\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n  const [input, {\n    data\n  }] = useMutation(CommentAdd);\n  const [open, setOpen] = React.useState(true);\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n  const SuccessFull = data ? data.createComment.success : \"\";\n\n  const submitComment = e => {\n    e.preventDefault();\n    input({\n      variables: {\n        input: {\n          clientMutationId: \"createComment\",\n          content: value,\n          userId: props.userid,\n          author: props.userName,\n          commentOn: props.postid\n        }\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return __jsx(\"div\", {\n    key: props.keyId,\n    className: \"container\"\n  }, __jsx(\"form\", {\n    onSubmit: submitComment\n  }, __jsx(ReactMde, {\n    value: value,\n    onChange: setValue,\n    selectedTab: selectedTab,\n    onTabChange: setSelectedTab,\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    childProps: {\n      writeButton: {\n        tabIndex: -1\n      }\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    className: style.productButton,\n    size: \"small\"\n  }, \"Submit\")), SuccessFull ? __jsx(Snackbar, {\n    open: open,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    severity: \"success\"\n  }, \"Your Comment success Full Submit\")) : '');\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/CommentEditor/CommentEditor.js"],"names":["React","ReactMde","Showdown","gql","useMutation","Snackbar","MuiAlert","Button","style","Alert","props","CommentEditor","CommentAdd","value","setValue","useState","selectedTab","setSelectedTab","input","data","open","setOpen","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","SuccessFull","createComment","success","submitComment","e","preventDefault","variables","clientMutationId","content","userId","userid","author","userName","commentOn","postid","handleClose","keyId","markdown","Promise","resolve","makeHtml","writeButton","tabIndex","productButton","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ReactMde from \"react-mde\";\r\nimport * as Showdown from \"showdown\";\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport style from '../css/Comments.module.scss'\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n export default  function CommentEditor(props) {\r\n    \r\n  const CommentAdd = gql`\r\n        mutation CREATE_COMMENT($input: CreateCommentInput!) {\r\n            createComment(input: $input ) {\r\n                success\r\n                clientMutationId\r\n            }\r\n        }\r\n    `\r\n\r\n    const [value, setValue] = React.useState();\r\n    const [selectedTab, setSelectedTab] = React.useState(\"write\");\r\n    const [input, { data } ] = useMutation(CommentAdd);\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const converter = new Showdown.Converter({\r\n      tables: true,\r\n      simplifiedAutoLink: true,\r\n      strikethrough: true,\r\n      tasklists: true\r\n    });\r\n  \r\n  \r\n    \r\n    \r\n\r\n    const SuccessFull= (data)? data.createComment.success :\"\"\r\n    const submitComment= e => {\r\n        \r\n        e.preventDefault();\r\n        input( \r\n            {\r\n                variables:{      \r\n                    input : {\r\n                        clientMutationId: \"createComment\",\r\n                        content: value,\r\n                        userId: props.userid, \r\n                        author: props.userName, \r\n                        commentOn: props.postid\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            )      \r\n            \r\n        }\r\n      \r\n     const handleClose = () => {      \r\n         setOpen(false);\r\n      };\r\n       \r\n     \r\n    return (\r\n      <div key={props.keyId} className=\"container\">\r\n        \r\n        <form onSubmit={submitComment} > \r\n  \r\n          <ReactMde\r\n            value={value}\r\n            onChange={setValue}\r\n            selectedTab={selectedTab}\r\n            onTabChange={setSelectedTab}\r\n            generateMarkdownPreview={markdown =>\r\n              Promise.resolve(converter.makeHtml(markdown))\r\n            }\r\n            childProps={{\r\n              writeButton: {\r\n                tabIndex: -1\r\n              }\r\n            }}\r\n  \r\n          />\r\n  \r\n            <Button type=\"submit\" className={style.productButton} size=\"small\">\r\n                             Submit  \r\n            </Button>\r\n        </form>\r\n      \r\n        {\r\n            (SuccessFull) ? <Snackbar open={open} anchorOrigin={ \r\n                {    vertical: 'top', \r\n                    horizontal: 'center' }\r\n                } \r\n                autoHideDuration={6000} onClose={handleClose}>\r\n                  <Alert onClose={handleClose} severity=\"success\">\r\n                        Your Comment success Full Submit \r\n                  </Alert>\r\n              </Snackbar> : ''\r\n        \r\n        }\r\n\r\n       \r\n      </div>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}