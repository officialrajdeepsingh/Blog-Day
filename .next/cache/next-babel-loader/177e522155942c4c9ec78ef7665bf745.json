{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\n\nvar Comment = /*#__PURE__*/function (_Component) {\n  _inherits(Comment, _Component);\n\n  var _super = _createSuper(Comment);\n\n  function Comment() {\n    _classCallCheck(this, Comment);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Comment, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.props.data;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n        charset: \"utf-8\"\n      })), __jsx(Container, {\n        className: style.root\n      }, __jsx(\"div\", {\n        className: style.cardInner\n      }, __jsx(Typography, {\n        component: \"h3\",\n        variant: \"h3\",\n        className: style.heading\n      }, \"Write a Comment\"), __jsx(Card, {\n        className: style.cardBox\n      }, __jsx(Avatar, {\n        alt: data.data.post.featuredImage.altText,\n        src: data.data.post.featuredImage.sourceUrl,\n        className: style.imageSize\n      }), __jsx(Link, {\n        href: \"/[read]?id=\".concat(data.data.post.id),\n        as: \"\".concat(data.data.post.slug, \"-\").concat(data.data.post.id)\n      }, __jsx(\"a\", {\n        dangerouslySetInnerHTML: {\n          __html: data.data.post.title\n        },\n        target: \"_blank\",\n        className: style.cardBoxTitle\n      })))), __jsx(\"div\", {\n        className: style.editorStyle\n      }, __jsx(CommentEditor, {\n        keyId: data.data.post.id,\n        userid: data.data.post.author.userId,\n        userName: data.data.post.author.name,\n        postid: data.data.post.postId\n      })), data.data.post.comments && data.data.post.comments.nodes.map(function (ReadComments) {\n        return __jsx(\"div\", {\n          key: ReadComments.id\n        }, __jsx(CommentsCard, {\n          data: ReadComments\n        }), ReadComments.replies && ReadComments.replies.nodes.map(function (replies) {\n          return __jsx(CommentsCard, {\n            reply: true,\n            data: replies\n          });\n        }));\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, id, res;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query;\n              id = query.Comment.split('-').pop();\n              console.log(query, ' form comment');\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(client.query({\n                query: POST_QUERY,\n                variables: {\n                  id: id\n                }\n              }));\n\n            case 6:\n              res = _context.sent;\n              return _context.abrupt(\"return\", {\n                data: res\n              });\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 10]], Promise);\n    }\n  }]);\n\n  return Comment;\n}(Component);\n\nexport { Comment as default };","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Component","Card","Typography","Container","Avatar","POST_COMMENT","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","data","props","root","cardInner","heading","cardBox","post","featuredImage","altText","sourceUrl","imageSize","id","slug","__html","title","cardBoxTitle","editorStyle","author","userId","name","postId","comments","nodes","map","ReadComments","replies","query","split","pop","console","log","POST_QUERY","variables","res","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\nexport default class Comment extends Component {\r\n\r\n      \r\n        static async getInitialProps({query}) {\r\n          \r\n          const id = query.Comment.split( '-' ).pop() ;       \r\n          console.log(query, ' form comment')\r\n          try{\r\n            const res= await client.query(({\r\n              query:POST_QUERY,\r\n              variables:{id}\r\n            }))\r\n            return { data: res}\r\n          }\r\n          catch(error){\r\n            console.error(error)\r\n          }\r\n      \r\n       } \r\n\r\n    render() {\r\n        const {data}= this.props\r\n\r\n        return (\r\n             <>\r\n             \r\n                <Head> \r\n                    <meta charset=\"utf-8\" />\r\n                </Head>\r\n                  <Container className={style.root}>\r\n                  \r\n                    <div className={style.cardInner}>\r\n                        <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                            Write a Comment\r\n                        </Typography>\r\n                        <Card className={style.cardBox}>\r\n                        <Avatar alt={data.data.post.featuredImage.altText} src={data.data.post.featuredImage.sourceUrl} className={style.imageSize} />\r\n                        <Link href={`/[read]?id=${data.data.post.id}`} as={ `${data.data.post.slug}-${data.data.post.id}`}>\r\n                            <a dangerouslySetInnerHTML={{ __html: data.data.post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                            </a>\r\n                        </Link>\r\n                        </Card>\r\n                    </div>\r\n                  \r\n                    <div className={style.editorStyle}> \r\n\r\n\r\n                      <CommentEditor keyId={data.data.post.id} userid={data.data.post.author.userId } userName={data.data.post.author.name } postid={data.data.post.postId}/>\r\n                    \r\n\r\n                     \r\n                    </div> \r\n                 \r\n                  { \r\n                    data.data.post.comments && data.data.post.comments.nodes.map(\r\n                      (ReadComments)=>{\r\n                          return (\r\n                            <div key={ReadComments.id}>\r\n                              <CommentsCard  data={ReadComments} />\r\n                              { \r\n                                ReadComments.replies && ReadComments.replies.nodes.map(\r\n                                    replies=>{\r\n                                        return <CommentsCard   reply={true} data={replies} />\r\n                                    }\r\n                                  )\r\n                              } \r\n\r\n                            </div>\r\n                          )       \r\n                      }\r\n                   )\r\n                  }\r\n              </Container>\r\n            \r\n             \r\n            </>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}