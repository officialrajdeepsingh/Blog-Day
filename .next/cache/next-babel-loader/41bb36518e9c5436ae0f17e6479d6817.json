{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport { POST_COMMENT } from \"../../Component/graphalQurey\";\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport { client } from \"../../Component/apollo-client\";\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport default function Comment(props) {\n  var statusCode = props.statusCode,\n      getData = props.getData; // const { data } =  getData\n  //     const {post} = data\n  //     let UserId;\n  //     let DisplayName;\n  //   if (process.browser) {\n  //     UserId= localStorage.getItem(\"userId\")\n  //     DisplayName= localStorage.getItem(\"displayName\");\n  //   } \n\n  console.log(props, ' inside Comments '); // if (statusCode , post) {\n  //     return <Error statusCode={statusCode} />\n  // }\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"meta\", {\n    charSet: \"utf-8\"\n  })));\n} // export const  getServerSideProps =  async ({  query })=> {\n//   const id = query.Comment.split( '-' ).pop() ;       \n//     try{\n//       const getData= await client.query(({\n//         query:POST_COMMENT,\n//         variables:{id}\n//       }))\n//       return{ props: { getData }}\n//     }\n//     catch(error){\n//       return { props: { statusCode: 404 } }\n//     }\n// }\n\nfunction LoginCheck() {\n  return __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    target: \"_blank\"\n  }, \" Login Now\")));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Fragment","useEffect","useState","Card","Typography","Container","Avatar","POST_COMMENT","CommentsCard","style","Head","gql","client","Link","CommentEditor","Comment","props","statusCode","getData","console","log","LoginCheck","commentLogin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,OAAOC,KAAP,MAAkB,0CAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAAQC,MAAR,QAAqB,+BAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AAIA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA,MAC9BC,UAD8B,GACRD,KADQ,CAC9BC,UAD8B;AAAA,MAClBC,OADkB,GACRF,KADQ,CAClBE,OADkB,EAErC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEEC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAoB,mBAApB,EAZmC,CAcrC;AACA;AACA;;AAEE,SACE,mBACE,MAAC,IAAD,QACE;AAAM,IAAA,OAAO,EAAC;AAAd,IADF,CADF,CADF;AAgDH,C,CAGD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASK,UAAT,GAAsB;AACpB,SACE;AAAK,IAAA,SAAS,EAAEZ,KAAK,CAACa;AAAtB,KACA,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE;AAAG,IAAA,MAAM,EAAC;AAAV,kBADF,CADA,CADF;AASD","sourcesContent":["import React, { Fragment,useEffect, useState } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n  const {statusCode, getData} =props\r\n  // const { data } =  getData\r\n  //     const {post} = data\r\n  //     let UserId;\r\n  //     let DisplayName;\r\n\r\n  //   if (process.browser) {\r\n  //     UserId= localStorage.getItem(\"userId\")\r\n  //     DisplayName= localStorage.getItem(\"displayName\");\r\n  //   } \r\n\r\n    console.log(props , ' inside Comments ')\r\n\r\n  // if (statusCode , post) {\r\n  //     return <Error statusCode={statusCode} />\r\n  // }\r\n \r\n    return (\r\n      <div>       \r\n        <Head> \r\n          <meta charSet=\"utf-8\" />\r\n        </Head>\r\n        {/* <Container className={style.root}>\r\n            <div className={style.cardInner}>\r\n                <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                    Write a Comment\r\n                </Typography>\r\n                <Card className={style.cardBox}>\r\n                <Avatar alt={post.featuredImage.altText} src={post.featuredImage.sourceUrl} className={style.imageSize} />\r\n                <Link href={`/[read]?id=${post.id}`} as={ `${post.slug}-${post.id}`}>\r\n                    <a dangerouslySetInnerHTML={{ __html: post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                    </a>\r\n                </Link>\r\n                </Card>\r\n            </div>\r\n          \r\n          <div style={{\"display\":\"block\"}} > \r\n              {            \r\n                ( !UserId && !DisplayName)? < LoginCheck/> : \r\n                          <CommentEditor className={style.editorStyle} keyId={post.id}   postid={post.postId}/>  \r\n              }\r\n          </div>\r\n        \r\n          { \r\n            post.comments && post.comments.nodes.map(\r\n              (ReadComments)=>{\r\n                  return (\r\n                  <div style={{\"display\":\"block\"}}  key={ReadComments.id} >\r\n                      <CommentsCard key={ReadComments.id}  data={ReadComments} />\r\n                        { \r\n                          ReadComments.replies && ReadComments.replies.nodes.map(\r\n                              replies=>{\r\n                                  return <CommentsCard key={replies.id} reply={true} data={replies} />\r\n                              }\r\n                            )\r\n                        } \r\n                    </div> \r\n                  )       \r\n              }\r\n          )\r\n          }\r\n      </Container>    */}\r\n      </div>\r\n    )\r\n  \r\n}\r\n\r\n\r\n// export const  getServerSideProps =  async ({  query })=> {\r\n          \r\n//   const id = query.Comment.split( '-' ).pop() ;       \r\n//     try{\r\n//       const getData= await client.query(({\r\n//         query:POST_COMMENT,\r\n//         variables:{id}\r\n//       }))\r\n//       return{ props: { getData }}\r\n//     }\r\n//     catch(error){\r\n//       return { props: { statusCode: 404 } }\r\n//     }\r\n\r\n// }\r\n\r\nfunction LoginCheck() {\r\n  return (\r\n    <div className={style.commentLogin}>\r\n    <Link href=\"/login\">\r\n      <a target=\"_blank\"> Login Now</a>\r\n    </Link>\r\n   </div>\r\n      \r\n    \r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}