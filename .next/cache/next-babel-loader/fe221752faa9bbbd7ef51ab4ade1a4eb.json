{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss';\nimport { request } from 'graphql-request';\nimport { COMMENT_MUTATION } from \"../graphalQurey\";\nimport useSWR from 'swr';\n\nvar signUP = function signUP(input) {\n  return request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\n};\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props), __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: props.show\n    }\n  }));\n}\n\nexport default function CommentEditor(props) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"write\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedTab = _React$useState4[0],\n      setSelectedTab = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      open = _React$useState6[0],\n      setOpen = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      comment = _React$useState8[0],\n      setComment = _React$useState8[1];\n\n  var converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n\n  var submitComment = function submitComment(e) {\n    var getUserId, getDisplayName, data;\n    return _regeneratorRuntime.async(function submitComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            getUserId = localStorage.getItem(\"userId\");\n            getDisplayName = localStorage.getItem(\"displayName\");\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(signUP({\n              \"input\": {\n                \"content\": value,\n                \"author\": getDisplayName,\n                \"userId\": getUserId,\n                \"clientMutationId\": \"createComment\",\n                \"commentOn\": props.postid\n              }\n            }).then(function (data) {\n              setComment(function () {\n                return {\n                  data: data\n                };\n              });\n            })[\"catch\"](function (error) {\n              return setComment(function () {\n                return {\n                  error: error\n                };\n              });\n            }));\n\n          case 5:\n            data = _context.sent;\n            setOpen(function () {\n              return true;\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  console.log(comment, ' comment ');\n  var ShowAlertError = comment.error ? comment.error.response.errors[0].message : 'submit';\n  return __jsx(\"div\", {\n    key: props.keyId,\n    className: \"container\"\n  }, __jsx(\"form\", {\n    onSubmit: submitComment\n  }, __jsx(ReactMde, {\n    value: value,\n    onChange: setValue,\n    selectedTab: selectedTab,\n    onTabChange: setSelectedTab,\n    generateMarkdownPreview: function generateMarkdownPreview(markdown) {\n      return Promise.resolve(converter.makeHtml(markdown));\n    },\n    childProps: {\n      writeButton: {\n        tabIndex: -1\n      }\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    className: style.productButton,\n    size: \"small\"\n  }, \"Submit\")), __jsx(Snackbar, {\n    open: open,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    autoHideDuration: 6000,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    onClose: handleClose,\n    show: ShowAlertError,\n    severity: comment.error ? \"error\" : 'success'\n  })));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/CommentEditor/CommentEditor.js"],"names":["React","ReactMde","Showdown","Snackbar","MuiAlert","Button","style","request","COMMENT_MUTATION","useSWR","signUP","input","Alert","props","__html","show","CommentEditor","useState","value","setValue","selectedTab","setSelectedTab","open","setOpen","comment","setComment","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","submitComment","e","preventDefault","getUserId","localStorage","getItem","getDisplayName","postid","then","data","error","handleClose","console","log","ShowAlertError","response","errors","message","keyId","markdown","Promise","resolve","makeHtml","writeButton","tabIndex","productButton","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss'\nimport { request } from 'graphql-request';\nimport {COMMENT_MUTATION} from \"../graphalQurey\"\nimport useSWR from 'swr'\n\n\nconst signUP = (input) => {\n  return  request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\n};\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} > \n              <div dangerouslySetInnerHTML={{ __html: props.show }}></div> \n          </MuiAlert>\n}\n\n export default  function CommentEditor(props) {\n  const [value, setValue] = React.useState();\n    const [selectedTab, setSelectedTab] = React.useState(\"write\");    \n    const [open, setOpen] = React.useState(false);\n    const [comment, setComment] = React.useState({});\n\n    const converter = new Showdown.Converter({\n      tables: true,\n      simplifiedAutoLink: true,\n      strikethrough: true,\n      tasklists: true\n    });\n\n\n\n    const submitComment= async (e) => {\n        e.preventDefault();           \n          const getUserId= localStorage.getItem(\"userId\")\n          const getDisplayName= localStorage.getItem(\"displayName\");\n         const data = await signUP( {\n            \"input\":{\n                    \"content\": value,\n                    \"author\": getDisplayName, \n                    \"userId\":getUserId,\n                    \"clientMutationId\": \"createComment\",\n                    \"commentOn\": props.postid\n            }\n          }  \n        ).then(\n          (data)=>{\n            setComment( ()=>{ return {data} })\n          }\n        ).catch((error)=> setComment(()=> { return {error}}))\n        setOpen(()=> true );\n\n\n        }\n      \n     const handleClose = () => {      \n         setOpen(false);\n      };\n      console.log(comment, ' comment ');\n\n      const ShowAlertError= (comment.error)? comment.error.response.errors[0].message:'submit'\n\n    return (\n      <div key={props.keyId} className=\"container\">\n        \n        <form onSubmit={submitComment} > \n  \n          <ReactMde\n            value={value}\n            onChange={setValue}\n            selectedTab={selectedTab}\n            onTabChange={setSelectedTab}\n            generateMarkdownPreview={markdown =>\n              Promise.resolve(converter.makeHtml(markdown))\n            }\n            childProps={{\n              writeButton: {\n                tabIndex: -1\n              }\n            }}\n          />\n  \n            <Button type=\"submit\" className={style.productButton} size=\"small\">\n                             Submit  \n            </Button>\n        </form>\n      \n       <Snackbar open={open} anchorOrigin={ \n                {    vertical: 'top', \n                    horizontal: 'center' }\n                } \n                autoHideDuration={6000} onClose={handleClose}>\n                   <Alert onClose={handleClose} show={ShowAlertError} severity= {(comment.error)? \"error\":'success'} ></Alert>\n       </Snackbar> \n        \n        \n\n       \n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}