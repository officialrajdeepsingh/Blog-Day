{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport style from '../css/Comments.module.scss';\nimport { request } from 'graphql-request';\n\nconst signUP = input => {\n  return request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\n};\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props));\n}\n\nexport default function CommentEditor(props) {\n  const [value, setValue] = React.useState();\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n  const [open, setOpen] = React.useState(true);\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  }); // const SuccessFull= (data)? data.createComment.success :\"\"\n\n  const submitComment = async e => {\n    const userId = localStorage.getItem(\"userId\");\n    const displayName = localStorage.getItem(\"displayName\"); // localStorage.setItem(\"userId\", data.login.user.userId);\n\n    e.preventDefault();\n    const data = await signUP({\n      \"input\": {\n        \"content\": value,\n        \"author\": displayName,\n        \"userId\": userId,\n        \"clientMutationId\": \"createComment\",\n        \"commentOn\": props.postid\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return __jsx(\"div\", {\n    key: props.keyId,\n    className: \"container\"\n  }, __jsx(\"form\", {\n    onSubmit: submitComment\n  }, __jsx(ReactMde, {\n    value: value,\n    onChange: setValue,\n    selectedTab: selectedTab,\n    onTabChange: setSelectedTab,\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    childProps: {\n      writeButton: {\n        tabIndex: -1\n      }\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    className: style.productButton,\n    size: \"small\"\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/Component/CommentEditor/CommentEditor.js"],"names":["React","ReactMde","Showdown","gql","useMutation","Snackbar","MuiAlert","Button","style","request","signUP","input","COMMENT_MUTATION","Alert","props","CommentEditor","value","setValue","useState","selectedTab","setSelectedTab","open","setOpen","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","submitComment","e","userId","localStorage","getItem","displayName","preventDefault","data","postid","handleClose","keyId","markdown","Promise","resolve","makeHtml","writeButton","tabIndex","productButton"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAGA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,SAAQF,OAAO,CAAC,sCAAD,EAAyCG,gBAAzC,EAA2DD,KAA3D,CAAf;AACD,CAFD;;AAMA,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAClB,SAAO,MAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,OAAO,EAAC;AAAhC,KAA6CA,KAA7C,EAAP;AACD;;AAEF,eAAgB,SAASC,aAAT,CAAuBD,KAAvB,EAA8B;AAG3C,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBjB,KAAK,CAACkB,QAAN,EAA1B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCpB,KAAK,CAACkB,QAAN,CAAe,OAAf,CAAtC;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBtB,KAAK,CAACkB,QAAN,CAAe,IAAf,CAAxB;AAEA,QAAMK,SAAS,GAAG,IAAIrB,QAAQ,CAACsB,SAAb,CAAuB;AACvCC,IAAAA,MAAM,EAAE,IAD+B;AAEvCC,IAAAA,kBAAkB,EAAE,IAFmB;AAGvCC,IAAAA,aAAa,EAAE,IAHwB;AAIvCC,IAAAA,SAAS,EAAE;AAJ4B,GAAvB,CAAlB,CAR2C,CAe3C;;AACA,QAAMC,aAAa,GAAE,MAAOC,CAAP,IAAa;AACjC,UAAMC,MAAM,GAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAd;AACA,UAAMC,WAAW,GAAEF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAnB,CAFiC,CAGhC;;AAEEH,IAAAA,CAAC,CAACK,cAAF;AACI,UAAOC,IAAI,GAAI,MAAO1B,MAAM,CAAC;AACrB,eAAQ;AAEC,mBAAWM,KAFZ;AAGC,kBAAUkB,WAHX;AAIC,kBAASH,MAJV;AAKA,4BAAoB,eALpB;AAMA,qBAAajB,KAAK,CAACuB;AANnB;AADa,KAAD,CAA5B;AAWH,GAjBL;;AAmBC,QAAMC,WAAW,GAAG,MAAM;AACtBhB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACF,GAFF;;AAKD,SACE;AAAK,IAAA,GAAG,EAAER,KAAK,CAACyB,KAAhB;AAAuB,IAAA,SAAS,EAAC;AAAjC,KAEE;AAAM,IAAA,QAAQ,EAAEV;AAAhB,KAEE,MAAC,QAAD;AACE,IAAA,KAAK,EAAEb,KADT;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,WAAW,EAAEE,WAHf;AAIE,IAAA,WAAW,EAAEC,cAJf;AAKE,IAAA,uBAAuB,EAAEoB,QAAQ,IAC/BC,OAAO,CAACC,OAAR,CAAgBnB,SAAS,CAACoB,QAAV,CAAmBH,QAAnB,CAAhB,CANJ;AAQE,IAAA,UAAU,EAAE;AACVI,MAAAA,WAAW,EAAE;AACXC,QAAAA,QAAQ,EAAE,CAAC;AADA;AADH;AARd,IAFF,EAkBI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAErC,KAAK,CAACsC,aAAvC;AAAsD,IAAA,IAAI,EAAC;AAA3D,cAlBJ,CAFF,CADF;AA0CD","sourcesContent":["import React from 'react'\r\nimport ReactMde from \"react-mde\";\r\nimport * as Showdown from \"showdown\";\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport style from '../css/Comments.module.scss'\r\nimport { request } from 'graphql-request';\r\n\r\n\r\nconst signUP = (input) => {\r\n  return  request('https://www.rajdeepsingh.dev/graphql', COMMENT_MUTATION, input);\r\n};\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n export default  function CommentEditor(props) {\r\n \r\n\r\n    const [value, setValue] = React.useState();\r\n    const [selectedTab, setSelectedTab] = React.useState(\"write\");\r\n    \r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const converter = new Showdown.Converter({\r\n      tables: true,\r\n      simplifiedAutoLink: true,\r\n      strikethrough: true,\r\n      tasklists: true\r\n    });\r\n\r\n    // const SuccessFull= (data)? data.createComment.success :\"\"\r\n    const submitComment= async (e) => {\r\n     const userId= localStorage.getItem(\"userId\");\r\n     const displayName= localStorage.getItem(\"displayName\");\r\n      // localStorage.setItem(\"userId\", data.login.user.userId);\r\n\r\n        e.preventDefault();\r\n            const  data=   await  signUP({\r\n                    \"input\":{ \r\n                           \r\n                             \"content\": value,\r\n                             \"author\": displayName, \r\n                             \"userId\":userId,\r\n                            \"clientMutationId\": \"createComment\",\r\n                            \"commentOn\": props.postid\r\n                    }\r\n            })   \r\n            \r\n        }\r\n      \r\n     const handleClose = () => {      \r\n         setOpen(false);\r\n      };\r\n       \r\n     \r\n    return (\r\n      <div key={props.keyId} className=\"container\">\r\n        \r\n        <form onSubmit={submitComment} > \r\n  \r\n          <ReactMde\r\n            value={value}\r\n            onChange={setValue}\r\n            selectedTab={selectedTab}\r\n            onTabChange={setSelectedTab}\r\n            generateMarkdownPreview={markdown =>\r\n              Promise.resolve(converter.makeHtml(markdown))\r\n            }\r\n            childProps={{\r\n              writeButton: {\r\n                tabIndex: -1\r\n              }\r\n            }}\r\n  \r\n          />\r\n  \r\n            <Button type=\"submit\" className={style.productButton} size=\"small\">\r\n                             Submit  \r\n            </Button>\r\n        </form>\r\n      \r\n        {\r\n            // (SuccessFull) ? <Snackbar open={open} anchorOrigin={ \r\n            //     {    vertical: 'top', \r\n            //         horizontal: 'center' }\r\n            //     } \r\n            //     autoHideDuration={6000} onClose={handleClose}>\r\n            //       <Alert onClose={handleClose} severity=\"success\">\r\n            //             Your Comment success Full Submit \r\n            //       </Alert>\r\n            //   </Snackbar> : ''\r\n        \r\n        }\r\n\r\n       \r\n      </div>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}