{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Avatar from '@material-ui/core/Avatar';\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard';\nimport style from '../../Component/css/Comments.module.scss';\nimport Head from 'next/head';\nimport gql from 'graphql-tag';\nimport Link from 'next/link';\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor';\nexport var __N_SSP = true;\nexport default function Comment(props) {\n  var getData = props.getData;\n  var data = getData.data;\n  var post = data.post;\n  var UserId;\n  var DisplayName;\n\n  if (true) {\n    UserId = localStorage.getItem(\"userId\");\n    DisplayName = localStorage.getItem(\"displayName\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    charSet: \"utf-8\"\n  })), __jsx(Container, {\n    className: style.root\n  }, __jsx(\"div\", {\n    className: style.cardInner\n  }, __jsx(Typography, {\n    component: \"h3\",\n    variant: \"h3\",\n    className: style.heading\n  }, \"Write a Comment\"), __jsx(Card, {\n    className: style.cardBox\n  }, __jsx(Avatar, {\n    alt: post.featuredImage.altText,\n    src: post.featuredImage.sourceUrl,\n    className: style.imageSize\n  }), __jsx(Link, {\n    href: \"/[read]?id=\".concat(post.id),\n    as: \"\".concat(post.slug, \"-\").concat(post.id)\n  }, __jsx(\"a\", {\n    dangerouslySetInnerHTML: {\n      __html: post.title\n    },\n    target: \"_blank\",\n    className: style.cardBoxTitle\n  })))), __jsx(\"div\", {\n    style: {\n      \"display\": \"block\"\n    }\n  }, !UserId && !DisplayName ? __jsx(LoginCheck, null) : __jsx(CommentEditor, {\n    className: style.editorStyle,\n    keyId: post.id,\n    postid: post.postId\n  })), post.comments && post.comments.nodes.map(function (ReadComments) {\n    return __jsx(\"div\", {\n      style: {\n        \"display\": \"block\"\n      },\n      key: ReadComments.id\n    }, __jsx(CommentsCard, {\n      key: ReadComments.id,\n      data: ReadComments\n    }), ReadComments.replies && ReadComments.replies.nodes.map(function (replies) {\n      return __jsx(CommentsCard, {\n        key: replies.id,\n        reply: true,\n        data: replies\n      });\n    }));\n  })));\n}\n\nfunction LoginCheck() {\n  return __jsx(\"div\", {\n    className: style.commentLogin\n  }, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    target: \"_blank\"\n  }, \" Login Now\")));\n}","map":{"version":3,"sources":["D:/Nextjs/old-app/pages/Comment/[Comment].js"],"names":["React","Fragment","useEffect","useState","Card","Typography","Container","Avatar","CommentsCard","style","Head","gql","Link","CommentEditor","Comment","props","getData","data","post","UserId","DisplayName","localStorage","getItem","root","cardInner","heading","cardBox","featuredImage","altText","sourceUrl","imageSize","id","slug","__html","title","cardBoxTitle","editorStyle","postId","comments","nodes","map","ReadComments","replies","LoginCheck","commentLogin"],"mappings":"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","sourcesContent":["import React, { Fragment,useEffect, useState } from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {POST_COMMENT} from \"../../Component/graphalQurey\"\r\n\r\nimport CommentsCard from '../../Component/CommentsCard/CommentsCard'\r\n\r\nimport style from '../../Component/css/Comments.module.scss'\r\n\r\nimport Head from 'next/head'\r\nimport gql from 'graphql-tag';\r\n\r\nimport {client} from \"../../Component/apollo-client\";\r\nimport Link from 'next/link';\r\nimport CommentEditor from '../../Component/CommentEditor/CommentEditor'\r\n\r\n\r\n\r\nexport default function Comment(props) {\r\n\r\n\r\n  const { getData }= props;   \r\n  const {data} = getData\r\n const {post} = data\r\n let UserId;\r\n let DisplayName;\r\n\r\n if (process.browser) {\r\n   UserId= localStorage.getItem(\"userId\")\r\n   DisplayName= localStorage.getItem(\"displayName\");\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <>       \r\n      <Head> \r\n        <meta charSet=\"utf-8\" />\r\n      </Head>\r\n      <Container className={style.root}>\r\n      \r\n        <div className={style.cardInner}>\r\n            <Typography component=\"h3\" variant=\"h3\"  className={style.heading}>\r\n                Write a Comment\r\n            </Typography>\r\n            <Card className={style.cardBox}>\r\n            <Avatar alt={post.featuredImage.altText} src={post.featuredImage.sourceUrl} className={style.imageSize} />\r\n            <Link href={`/[read]?id=${post.id}`} as={ `${post.slug}-${post.id}`}>\r\n                <a dangerouslySetInnerHTML={{ __html: post.title }} target=\"_blank\" className={style.cardBoxTitle}>\r\n                </a>\r\n            </Link>\r\n            </Card>\r\n        </div>\r\n       <div style={{\"display\":\"block\"}} > \r\n          {            \r\n            ( !UserId && !DisplayName)? < LoginCheck/> : \r\n                      <CommentEditor className={style.editorStyle} keyId={post.id}   postid={post.postId}/>  \r\n                    \r\n          }\r\n       </div>\r\n     \r\n      { \r\n        post.comments && post.comments.nodes.map(\r\n          (ReadComments)=>{\r\n              return (\r\n\r\n               <div style={{\"display\":\"block\"}}  key={ReadComments.id} >\r\n                  <CommentsCard key={ReadComments.id}  data={ReadComments} />\r\n                  { \r\n                    ReadComments.replies && ReadComments.replies.nodes.map(\r\n                        replies=>{\r\n                            return <CommentsCard key={replies.id} reply={true} data={replies} />\r\n                        }\r\n                      )\r\n                  } \r\n                </div> \r\n              )       \r\n          }\r\n       )\r\n      }\r\n  </Container>  \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport const  getServerSideProps =  async ({  query })=> {\r\n          \r\n  const id = query.Comment.split( '-' ).pop() ;       \r\n  try{\r\n    const getData= await client.query(({\r\n      query:POST_COMMENT,\r\n      variables:{id}\r\n    }))\r\n    return{ props: { getData}}\r\n  }\r\n  catch(error){\r\n    return { props: { statusCode: 404 } }\r\n  }\r\n\r\n}\r\n\r\n  function LoginCheck() {\r\n  return (\r\n    <div className={style.commentLogin}>\r\n    <Link href=\"/login\">\r\n      <a target=\"_blank\"> Login Now</a>\r\n    </Link>\r\n   </div>\r\n      \r\n    \r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}